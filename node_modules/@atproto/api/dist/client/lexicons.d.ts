/**
 * GENERATED CODE - DO NOT MODIFY
 */
import { LexiconDoc, Lexicons } from '@atproto/lexicon';
export declare const schemaDict: {
    ComAtprotoAdminDefs: {
        lexicon: number;
        id: string;
        defs: {
            statusAttr: {
                type: string;
                required: string[];
                properties: {
                    applied: {
                        type: string;
                    };
                    ref: {
                        type: string;
                    };
                };
            };
            accountView: {
                type: string;
                required: string[];
                properties: {
                    did: {
                        type: string;
                        format: string;
                    };
                    handle: {
                        type: string;
                        format: string;
                    };
                    email: {
                        type: string;
                    };
                    relatedRecords: {
                        type: string;
                        items: {
                            type: string;
                        };
                    };
                    indexedAt: {
                        type: string;
                        format: string;
                    };
                    invitedBy: {
                        type: string;
                        ref: string;
                    };
                    invites: {
                        type: string;
                        items: {
                            type: string;
                            ref: string;
                        };
                    };
                    invitesDisabled: {
                        type: string;
                    };
                    emailConfirmedAt: {
                        type: string;
                        format: string;
                    };
                    inviteNote: {
                        type: string;
                    };
                };
            };
            repoRef: {
                type: string;
                required: string[];
                properties: {
                    did: {
                        type: string;
                        format: string;
                    };
                };
            };
            repoBlobRef: {
                type: string;
                required: string[];
                properties: {
                    did: {
                        type: string;
                        format: string;
                    };
                    cid: {
                        type: string;
                        format: string;
                    };
                    recordUri: {
                        type: string;
                        format: string;
                    };
                };
            };
        };
    };
    ComAtprotoAdminDeleteAccount: {
        lexicon: number;
        id: string;
        defs: {
            main: {
                type: string;
                description: string;
                input: {
                    encoding: string;
                    schema: {
                        type: string;
                        required: string[];
                        properties: {
                            did: {
                                type: string;
                                format: string;
                            };
                        };
                    };
                };
            };
        };
    };
    ComAtprotoAdminDisableAccountInvites: {
        lexicon: number;
        id: string;
        defs: {
            main: {
                type: string;
                description: string;
                input: {
                    encoding: string;
                    schema: {
                        type: string;
                        required: string[];
                        properties: {
                            account: {
                                type: string;
                                format: string;
                            };
                            note: {
                                type: string;
                                description: string;
                            };
                        };
                    };
                };
            };
        };
    };
    ComAtprotoAdminDisableInviteCodes: {
        lexicon: number;
        id: string;
        defs: {
            main: {
                type: string;
                description: string;
                input: {
                    encoding: string;
                    schema: {
                        type: string;
                        properties: {
                            codes: {
                                type: string;
                                items: {
                                    type: string;
                                };
                            };
                            accounts: {
                                type: string;
                                items: {
                                    type: string;
                                };
                            };
                        };
                    };
                };
            };
        };
    };
    ComAtprotoAdminEnableAccountInvites: {
        lexicon: number;
        id: string;
        defs: {
            main: {
                type: string;
                description: string;
                input: {
                    encoding: string;
                    schema: {
                        type: string;
                        required: string[];
                        properties: {
                            account: {
                                type: string;
                                format: string;
                            };
                            note: {
                                type: string;
                                description: string;
                            };
                        };
                    };
                };
            };
        };
    };
    ComAtprotoAdminGetAccountInfo: {
        lexicon: number;
        id: string;
        defs: {
            main: {
                type: string;
                description: string;
                parameters: {
                    type: string;
                    required: string[];
                    properties: {
                        did: {
                            type: string;
                            format: string;
                        };
                    };
                };
                output: {
                    encoding: string;
                    schema: {
                        type: string;
                        ref: string;
                    };
                };
            };
        };
    };
    ComAtprotoAdminGetAccountInfos: {
        lexicon: number;
        id: string;
        defs: {
            main: {
                type: string;
                description: string;
                parameters: {
                    type: string;
                    required: string[];
                    properties: {
                        dids: {
                            type: string;
                            items: {
                                type: string;
                                format: string;
                            };
                        };
                    };
                };
                output: {
                    encoding: string;
                    schema: {
                        type: string;
                        required: string[];
                        properties: {
                            infos: {
                                type: string;
                                items: {
                                    type: string;
                                    ref: string;
                                };
                            };
                        };
                    };
                };
            };
        };
    };
    ComAtprotoAdminGetInviteCodes: {
        lexicon: number;
        id: string;
        defs: {
            main: {
                type: string;
                description: string;
                parameters: {
                    type: string;
                    properties: {
                        sort: {
                            type: string;
                            knownValues: string[];
                            default: string;
                        };
                        limit: {
                            type: string;
                            minimum: number;
                            maximum: number;
                            default: number;
                        };
                        cursor: {
                            type: string;
                        };
                    };
                };
                output: {
                    encoding: string;
                    schema: {
                        type: string;
                        required: string[];
                        properties: {
                            cursor: {
                                type: string;
                            };
                            codes: {
                                type: string;
                                items: {
                                    type: string;
                                    ref: string;
                                };
                            };
                        };
                    };
                };
            };
        };
    };
    ComAtprotoAdminGetSubjectStatus: {
        lexicon: number;
        id: string;
        defs: {
            main: {
                type: string;
                description: string;
                parameters: {
                    type: string;
                    properties: {
                        did: {
                            type: string;
                            format: string;
                        };
                        uri: {
                            type: string;
                            format: string;
                        };
                        blob: {
                            type: string;
                            format: string;
                        };
                    };
                };
                output: {
                    encoding: string;
                    schema: {
                        type: string;
                        required: string[];
                        properties: {
                            subject: {
                                type: string;
                                refs: string[];
                            };
                            takedown: {
                                type: string;
                                ref: string;
                            };
                        };
                    };
                };
            };
        };
    };
    ComAtprotoAdminSendEmail: {
        lexicon: number;
        id: string;
        defs: {
            main: {
                type: string;
                description: string;
                input: {
                    encoding: string;
                    schema: {
                        type: string;
                        required: string[];
                        properties: {
                            recipientDid: {
                                type: string;
                                format: string;
                            };
                            content: {
                                type: string;
                            };
                            subject: {
                                type: string;
                            };
                            senderDid: {
                                type: string;
                                format: string;
                            };
                            comment: {
                                type: string;
                                description: string;
                            };
                        };
                    };
                };
                output: {
                    encoding: string;
                    schema: {
                        type: string;
                        required: string[];
                        properties: {
                            sent: {
                                type: string;
                            };
                        };
                    };
                };
            };
        };
    };
    ComAtprotoAdminUpdateAccountEmail: {
        lexicon: number;
        id: string;
        defs: {
            main: {
                type: string;
                description: string;
                input: {
                    encoding: string;
                    schema: {
                        type: string;
                        required: string[];
                        properties: {
                            account: {
                                type: string;
                                format: string;
                                description: string;
                            };
                            email: {
                                type: string;
                            };
                        };
                    };
                };
            };
        };
    };
    ComAtprotoAdminUpdateAccountHandle: {
        lexicon: number;
        id: string;
        defs: {
            main: {
                type: string;
                description: string;
                input: {
                    encoding: string;
                    schema: {
                        type: string;
                        required: string[];
                        properties: {
                            did: {
                                type: string;
                                format: string;
                            };
                            handle: {
                                type: string;
                                format: string;
                            };
                        };
                    };
                };
            };
        };
    };
    ComAtprotoAdminUpdateAccountPassword: {
        lexicon: number;
        id: string;
        defs: {
            main: {
                type: string;
                description: string;
                input: {
                    encoding: string;
                    schema: {
                        type: string;
                        required: string[];
                        properties: {
                            did: {
                                type: string;
                                format: string;
                            };
                            password: {
                                type: string;
                            };
                        };
                    };
                };
            };
        };
    };
    ComAtprotoAdminUpdateSubjectStatus: {
        lexicon: number;
        id: string;
        defs: {
            main: {
                type: string;
                description: string;
                input: {
                    encoding: string;
                    schema: {
                        type: string;
                        required: string[];
                        properties: {
                            subject: {
                                type: string;
                                refs: string[];
                            };
                            takedown: {
                                type: string;
                                ref: string;
                            };
                        };
                    };
                };
                output: {
                    encoding: string;
                    schema: {
                        type: string;
                        required: string[];
                        properties: {
                            subject: {
                                type: string;
                                refs: string[];
                            };
                            takedown: {
                                type: string;
                                ref: string;
                            };
                        };
                    };
                };
            };
        };
    };
    ComAtprotoIdentityGetRecommendedDidCredentials: {
        lexicon: number;
        id: string;
        defs: {
            main: {
                type: string;
                description: string;
                output: {
                    encoding: string;
                    schema: {
                        type: string;
                        properties: {
                            rotationKeys: {
                                description: string;
                                type: string;
                                items: {
                                    type: string;
                                };
                            };
                            alsoKnownAs: {
                                type: string;
                                items: {
                                    type: string;
                                };
                            };
                            verificationMethods: {
                                type: string;
                            };
                            services: {
                                type: string;
                            };
                        };
                    };
                };
            };
        };
    };
    ComAtprotoIdentityRequestPlcOperationSignature: {
        lexicon: number;
        id: string;
        defs: {
            main: {
                type: string;
                description: string;
            };
        };
    };
    ComAtprotoIdentityResolveHandle: {
        lexicon: number;
        id: string;
        defs: {
            main: {
                type: string;
                description: string;
                parameters: {
                    type: string;
                    required: string[];
                    properties: {
                        handle: {
                            type: string;
                            format: string;
                            description: string;
                        };
                    };
                };
                output: {
                    encoding: string;
                    schema: {
                        type: string;
                        required: string[];
                        properties: {
                            did: {
                                type: string;
                                format: string;
                            };
                        };
                    };
                };
            };
        };
    };
    ComAtprotoIdentitySignPlcOperation: {
        lexicon: number;
        id: string;
        defs: {
            main: {
                type: string;
                description: string;
                input: {
                    encoding: string;
                    schema: {
                        type: string;
                        properties: {
                            token: {
                                description: string;
                                type: string;
                            };
                            rotationKeys: {
                                type: string;
                                items: {
                                    type: string;
                                };
                            };
                            alsoKnownAs: {
                                type: string;
                                items: {
                                    type: string;
                                };
                            };
                            verificationMethods: {
                                type: string;
                            };
                            services: {
                                type: string;
                            };
                        };
                    };
                };
                output: {
                    encoding: string;
                    schema: {
                        type: string;
                        required: string[];
                        properties: {
                            operation: {
                                type: string;
                                description: string;
                            };
                        };
                    };
                };
            };
        };
    };
    ComAtprotoIdentitySubmitPlcOperation: {
        lexicon: number;
        id: string;
        defs: {
            main: {
                type: string;
                description: string;
                input: {
                    encoding: string;
                    schema: {
                        type: string;
                        required: string[];
                        properties: {
                            operation: {
                                type: string;
                            };
                        };
                    };
                };
            };
        };
    };
    ComAtprotoIdentityUpdateHandle: {
        lexicon: number;
        id: string;
        defs: {
            main: {
                type: string;
                description: string;
                input: {
                    encoding: string;
                    schema: {
                        type: string;
                        required: string[];
                        properties: {
                            handle: {
                                type: string;
                                format: string;
                                description: string;
                            };
                        };
                    };
                };
            };
        };
    };
    ComAtprotoLabelDefs: {
        lexicon: number;
        id: string;
        defs: {
            label: {
                type: string;
                description: string;
                required: string[];
                properties: {
                    ver: {
                        type: string;
                        description: string;
                    };
                    src: {
                        type: string;
                        format: string;
                        description: string;
                    };
                    uri: {
                        type: string;
                        format: string;
                        description: string;
                    };
                    cid: {
                        type: string;
                        format: string;
                        description: string;
                    };
                    val: {
                        type: string;
                        maxLength: number;
                        description: string;
                    };
                    neg: {
                        type: string;
                        description: string;
                    };
                    cts: {
                        type: string;
                        format: string;
                        description: string;
                    };
                    exp: {
                        type: string;
                        format: string;
                        description: string;
                    };
                    sig: {
                        type: string;
                        description: string;
                    };
                };
            };
            selfLabels: {
                type: string;
                description: string;
                required: string[];
                properties: {
                    values: {
                        type: string;
                        items: {
                            type: string;
                            ref: string;
                        };
                        maxLength: number;
                    };
                };
            };
            selfLabel: {
                type: string;
                description: string;
                required: string[];
                properties: {
                    val: {
                        type: string;
                        maxLength: number;
                        description: string;
                    };
                };
            };
            labelValueDefinition: {
                type: string;
                description: string;
                required: string[];
                properties: {
                    identifier: {
                        type: string;
                        description: string;
                        maxLength: number;
                        maxGraphemes: number;
                    };
                    severity: {
                        type: string;
                        description: string;
                        knownValues: string[];
                    };
                    blurs: {
                        type: string;
                        description: string;
                        knownValues: string[];
                    };
                    defaultSetting: {
                        type: string;
                        description: string;
                        knownValues: string[];
                        default: string;
                    };
                    adultOnly: {
                        type: string;
                        description: string;
                    };
                    locales: {
                        type: string;
                        items: {
                            type: string;
                            ref: string;
                        };
                    };
                };
            };
            labelValueDefinitionStrings: {
                type: string;
                description: string;
                required: string[];
                properties: {
                    lang: {
                        type: string;
                        description: string;
                        format: string;
                    };
                    name: {
                        type: string;
                        description: string;
                        maxGraphemes: number;
                        maxLength: number;
                    };
                    description: {
                        type: string;
                        description: string;
                        maxGraphemes: number;
                        maxLength: number;
                    };
                };
            };
            labelValue: {
                type: string;
                knownValues: string[];
            };
        };
    };
    ComAtprotoLabelQueryLabels: {
        lexicon: number;
        id: string;
        defs: {
            main: {
                type: string;
                description: string;
                parameters: {
                    type: string;
                    required: string[];
                    properties: {
                        uriPatterns: {
                            type: string;
                            items: {
                                type: string;
                            };
                            description: string;
                        };
                        sources: {
                            type: string;
                            items: {
                                type: string;
                                format: string;
                            };
                            description: string;
                        };
                        limit: {
                            type: string;
                            minimum: number;
                            maximum: number;
                            default: number;
                        };
                        cursor: {
                            type: string;
                        };
                    };
                };
                output: {
                    encoding: string;
                    schema: {
                        type: string;
                        required: string[];
                        properties: {
                            cursor: {
                                type: string;
                            };
                            labels: {
                                type: string;
                                items: {
                                    type: string;
                                    ref: string;
                                };
                            };
                        };
                    };
                };
            };
        };
    };
    ComAtprotoLabelSubscribeLabels: {
        lexicon: number;
        id: string;
        defs: {
            main: {
                type: string;
                description: string;
                parameters: {
                    type: string;
                    properties: {
                        cursor: {
                            type: string;
                            description: string;
                        };
                    };
                };
                message: {
                    schema: {
                        type: string;
                        refs: string[];
                    };
                };
                errors: {
                    name: string;
                }[];
            };
            labels: {
                type: string;
                required: string[];
                properties: {
                    seq: {
                        type: string;
                    };
                    labels: {
                        type: string;
                        items: {
                            type: string;
                            ref: string;
                        };
                    };
                };
            };
            info: {
                type: string;
                required: string[];
                properties: {
                    name: {
                        type: string;
                        knownValues: string[];
                    };
                    message: {
                        type: string;
                    };
                };
            };
        };
    };
    ComAtprotoModerationCreateReport: {
        lexicon: number;
        id: string;
        defs: {
            main: {
                type: string;
                description: string;
                input: {
                    encoding: string;
                    schema: {
                        type: string;
                        required: string[];
                        properties: {
                            reasonType: {
                                type: string;
                                description: string;
                                ref: string;
                            };
                            reason: {
                                type: string;
                                maxGraphemes: number;
                                maxLength: number;
                                description: string;
                            };
                            subject: {
                                type: string;
                                refs: string[];
                            };
                        };
                    };
                };
                output: {
                    encoding: string;
                    schema: {
                        type: string;
                        required: string[];
                        properties: {
                            id: {
                                type: string;
                            };
                            reasonType: {
                                type: string;
                                ref: string;
                            };
                            reason: {
                                type: string;
                                maxGraphemes: number;
                                maxLength: number;
                            };
                            subject: {
                                type: string;
                                refs: string[];
                            };
                            reportedBy: {
                                type: string;
                                format: string;
                            };
                            createdAt: {
                                type: string;
                                format: string;
                            };
                        };
                    };
                };
            };
        };
    };
    ComAtprotoModerationDefs: {
        lexicon: number;
        id: string;
        defs: {
            reasonType: {
                type: string;
                knownValues: string[];
            };
            reasonSpam: {
                type: string;
                description: string;
            };
            reasonViolation: {
                type: string;
                description: string;
            };
            reasonMisleading: {
                type: string;
                description: string;
            };
            reasonSexual: {
                type: string;
                description: string;
            };
            reasonRude: {
                type: string;
                description: string;
            };
            reasonOther: {
                type: string;
                description: string;
            };
            reasonAppeal: {
                type: string;
                description: string;
            };
        };
    };
    ComAtprotoRepoApplyWrites: {
        lexicon: number;
        id: string;
        defs: {
            main: {
                type: string;
                description: string;
                input: {
                    encoding: string;
                    schema: {
                        type: string;
                        required: string[];
                        properties: {
                            repo: {
                                type: string;
                                format: string;
                                description: string;
                            };
                            validate: {
                                type: string;
                                default: boolean;
                                description: string;
                            };
                            writes: {
                                type: string;
                                items: {
                                    type: string;
                                    refs: string[];
                                    closed: boolean;
                                };
                            };
                            swapCommit: {
                                type: string;
                                description: string;
                                format: string;
                            };
                        };
                    };
                };
                errors: {
                    name: string;
                    description: string;
                }[];
            };
            create: {
                type: string;
                description: string;
                required: string[];
                properties: {
                    collection: {
                        type: string;
                        format: string;
                    };
                    rkey: {
                        type: string;
                        maxLength: number;
                    };
                    value: {
                        type: string;
                    };
                };
            };
            update: {
                type: string;
                description: string;
                required: string[];
                properties: {
                    collection: {
                        type: string;
                        format: string;
                    };
                    rkey: {
                        type: string;
                    };
                    value: {
                        type: string;
                    };
                };
            };
            delete: {
                type: string;
                description: string;
                required: string[];
                properties: {
                    collection: {
                        type: string;
                        format: string;
                    };
                    rkey: {
                        type: string;
                    };
                };
            };
        };
    };
    ComAtprotoRepoCreateRecord: {
        lexicon: number;
        id: string;
        defs: {
            main: {
                type: string;
                description: string;
                input: {
                    encoding: string;
                    schema: {
                        type: string;
                        required: string[];
                        properties: {
                            repo: {
                                type: string;
                                format: string;
                                description: string;
                            };
                            collection: {
                                type: string;
                                format: string;
                                description: string;
                            };
                            rkey: {
                                type: string;
                                description: string;
                                maxLength: number;
                            };
                            validate: {
                                type: string;
                                default: boolean;
                                description: string;
                            };
                            record: {
                                type: string;
                                description: string;
                            };
                            swapCommit: {
                                type: string;
                                format: string;
                                description: string;
                            };
                        };
                    };
                };
                output: {
                    encoding: string;
                    schema: {
                        type: string;
                        required: string[];
                        properties: {
                            uri: {
                                type: string;
                                format: string;
                            };
                            cid: {
                                type: string;
                                format: string;
                            };
                        };
                    };
                };
                errors: {
                    name: string;
                    description: string;
                }[];
            };
        };
    };
    ComAtprotoRepoDeleteRecord: {
        lexicon: number;
        id: string;
        defs: {
            main: {
                type: string;
                description: string;
                input: {
                    encoding: string;
                    schema: {
                        type: string;
                        required: string[];
                        properties: {
                            repo: {
                                type: string;
                                format: string;
                                description: string;
                            };
                            collection: {
                                type: string;
                                format: string;
                                description: string;
                            };
                            rkey: {
                                type: string;
                                description: string;
                            };
                            swapRecord: {
                                type: string;
                                format: string;
                                description: string;
                            };
                            swapCommit: {
                                type: string;
                                format: string;
                                description: string;
                            };
                        };
                    };
                };
                errors: {
                    name: string;
                }[];
            };
        };
    };
    ComAtprotoRepoDescribeRepo: {
        lexicon: number;
        id: string;
        defs: {
            main: {
                type: string;
                description: string;
                parameters: {
                    type: string;
                    required: string[];
                    properties: {
                        repo: {
                            type: string;
                            format: string;
                            description: string;
                        };
                    };
                };
                output: {
                    encoding: string;
                    schema: {
                        type: string;
                        required: string[];
                        properties: {
                            handle: {
                                type: string;
                                format: string;
                            };
                            did: {
                                type: string;
                                format: string;
                            };
                            didDoc: {
                                type: string;
                                description: string;
                            };
                            collections: {
                                type: string;
                                description: string;
                                items: {
                                    type: string;
                                    format: string;
                                };
                            };
                            handleIsCorrect: {
                                type: string;
                                description: string;
                            };
                        };
                    };
                };
            };
        };
    };
    ComAtprotoRepoGetRecord: {
        lexicon: number;
        id: string;
        defs: {
            main: {
                type: string;
                description: string;
                parameters: {
                    type: string;
                    required: string[];
                    properties: {
                        repo: {
                            type: string;
                            format: string;
                            description: string;
                        };
                        collection: {
                            type: string;
                            format: string;
                            description: string;
                        };
                        rkey: {
                            type: string;
                            description: string;
                        };
                        cid: {
                            type: string;
                            format: string;
                            description: string;
                        };
                    };
                };
                output: {
                    encoding: string;
                    schema: {
                        type: string;
                        required: string[];
                        properties: {
                            uri: {
                                type: string;
                                format: string;
                            };
                            cid: {
                                type: string;
                                format: string;
                            };
                            value: {
                                type: string;
                            };
                        };
                    };
                };
            };
        };
    };
    ComAtprotoRepoImportRepo: {
        lexicon: number;
        id: string;
        defs: {
            main: {
                type: string;
                description: string;
                input: {
                    encoding: string;
                };
            };
        };
    };
    ComAtprotoRepoListMissingBlobs: {
        lexicon: number;
        id: string;
        defs: {
            main: {
                type: string;
                description: string;
                parameters: {
                    type: string;
                    properties: {
                        limit: {
                            type: string;
                            minimum: number;
                            maximum: number;
                            default: number;
                        };
                        cursor: {
                            type: string;
                        };
                    };
                };
                output: {
                    encoding: string;
                    schema: {
                        type: string;
                        required: string[];
                        properties: {
                            cursor: {
                                type: string;
                            };
                            blobs: {
                                type: string;
                                items: {
                                    type: string;
                                    ref: string;
                                };
                            };
                        };
                    };
                };
            };
            recordBlob: {
                type: string;
                required: string[];
                properties: {
                    cid: {
                        type: string;
                        format: string;
                    };
                    recordUri: {
                        type: string;
                        format: string;
                    };
                };
            };
        };
    };
    ComAtprotoRepoListRecords: {
        lexicon: number;
        id: string;
        defs: {
            main: {
                type: string;
                description: string;
                parameters: {
                    type: string;
                    required: string[];
                    properties: {
                        repo: {
                            type: string;
                            format: string;
                            description: string;
                        };
                        collection: {
                            type: string;
                            format: string;
                            description: string;
                        };
                        limit: {
                            type: string;
                            minimum: number;
                            maximum: number;
                            default: number;
                            description: string;
                        };
                        cursor: {
                            type: string;
                        };
                        rkeyStart: {
                            type: string;
                            description: string;
                        };
                        rkeyEnd: {
                            type: string;
                            description: string;
                        };
                        reverse: {
                            type: string;
                            description: string;
                        };
                    };
                };
                output: {
                    encoding: string;
                    schema: {
                        type: string;
                        required: string[];
                        properties: {
                            cursor: {
                                type: string;
                            };
                            records: {
                                type: string;
                                items: {
                                    type: string;
                                    ref: string;
                                };
                            };
                        };
                    };
                };
            };
            record: {
                type: string;
                required: string[];
                properties: {
                    uri: {
                        type: string;
                        format: string;
                    };
                    cid: {
                        type: string;
                        format: string;
                    };
                    value: {
                        type: string;
                    };
                };
            };
        };
    };
    ComAtprotoRepoPutRecord: {
        lexicon: number;
        id: string;
        defs: {
            main: {
                type: string;
                description: string;
                input: {
                    encoding: string;
                    schema: {
                        type: string;
                        required: string[];
                        nullable: string[];
                        properties: {
                            repo: {
                                type: string;
                                format: string;
                                description: string;
                            };
                            collection: {
                                type: string;
                                format: string;
                                description: string;
                            };
                            rkey: {
                                type: string;
                                description: string;
                                maxLength: number;
                            };
                            validate: {
                                type: string;
                                default: boolean;
                                description: string;
                            };
                            record: {
                                type: string;
                                description: string;
                            };
                            swapRecord: {
                                type: string;
                                format: string;
                                description: string;
                            };
                            swapCommit: {
                                type: string;
                                format: string;
                                description: string;
                            };
                        };
                    };
                };
                output: {
                    encoding: string;
                    schema: {
                        type: string;
                        required: string[];
                        properties: {
                            uri: {
                                type: string;
                                format: string;
                            };
                            cid: {
                                type: string;
                                format: string;
                            };
                        };
                    };
                };
                errors: {
                    name: string;
                }[];
            };
        };
    };
    ComAtprotoRepoStrongRef: {
        lexicon: number;
        id: string;
        description: string;
        defs: {
            main: {
                type: string;
                required: string[];
                properties: {
                    uri: {
                        type: string;
                        format: string;
                    };
                    cid: {
                        type: string;
                        format: string;
                    };
                };
            };
        };
    };
    ComAtprotoRepoUploadBlob: {
        lexicon: number;
        id: string;
        defs: {
            main: {
                type: string;
                description: string;
                input: {
                    encoding: string;
                };
                output: {
                    encoding: string;
                    schema: {
                        type: string;
                        required: string[];
                        properties: {
                            blob: {
                                type: string;
                            };
                        };
                    };
                };
            };
        };
    };
    ComAtprotoServerActivateAccount: {
        lexicon: number;
        id: string;
        defs: {
            main: {
                type: string;
                description: string;
            };
        };
    };
    ComAtprotoServerCheckAccountStatus: {
        lexicon: number;
        id: string;
        defs: {
            main: {
                type: string;
                description: string;
                output: {
                    encoding: string;
                    schema: {
                        type: string;
                        required: string[];
                        properties: {
                            activated: {
                                type: string;
                            };
                            validDid: {
                                type: string;
                            };
                            repoCommit: {
                                type: string;
                                format: string;
                            };
                            repoRev: {
                                type: string;
                            };
                            repoBlocks: {
                                type: string;
                            };
                            indexedRecords: {
                                type: string;
                            };
                            privateStateValues: {
                                type: string;
                            };
                            expectedBlobs: {
                                type: string;
                            };
                            importedBlobs: {
                                type: string;
                            };
                        };
                    };
                };
            };
        };
    };
    ComAtprotoServerConfirmEmail: {
        lexicon: number;
        id: string;
        defs: {
            main: {
                type: string;
                description: string;
                input: {
                    encoding: string;
                    schema: {
                        type: string;
                        required: string[];
                        properties: {
                            email: {
                                type: string;
                            };
                            token: {
                                type: string;
                            };
                        };
                    };
                };
                errors: {
                    name: string;
                }[];
            };
        };
    };
    ComAtprotoServerCreateAccount: {
        lexicon: number;
        id: string;
        defs: {
            main: {
                type: string;
                description: string;
                input: {
                    encoding: string;
                    schema: {
                        type: string;
                        required: string[];
                        properties: {
                            email: {
                                type: string;
                            };
                            handle: {
                                type: string;
                                format: string;
                                description: string;
                            };
                            did: {
                                type: string;
                                format: string;
                                description: string;
                            };
                            inviteCode: {
                                type: string;
                            };
                            verificationCode: {
                                type: string;
                            };
                            verificationPhone: {
                                type: string;
                            };
                            password: {
                                type: string;
                                description: string;
                            };
                            recoveryKey: {
                                type: string;
                                description: string;
                            };
                            plcOp: {
                                type: string;
                                description: string;
                            };
                        };
                    };
                };
                output: {
                    encoding: string;
                    schema: {
                        type: string;
                        description: string;
                        required: string[];
                        properties: {
                            accessJwt: {
                                type: string;
                            };
                            refreshJwt: {
                                type: string;
                            };
                            handle: {
                                type: string;
                                format: string;
                            };
                            did: {
                                type: string;
                                format: string;
                                description: string;
                            };
                            didDoc: {
                                type: string;
                                description: string;
                            };
                        };
                    };
                };
                errors: {
                    name: string;
                }[];
            };
        };
    };
    ComAtprotoServerCreateAppPassword: {
        lexicon: number;
        id: string;
        defs: {
            main: {
                type: string;
                description: string;
                input: {
                    encoding: string;
                    schema: {
                        type: string;
                        required: string[];
                        properties: {
                            name: {
                                type: string;
                                description: string;
                            };
                        };
                    };
                };
                output: {
                    encoding: string;
                    schema: {
                        type: string;
                        ref: string;
                    };
                };
                errors: {
                    name: string;
                }[];
            };
            appPassword: {
                type: string;
                required: string[];
                properties: {
                    name: {
                        type: string;
                    };
                    password: {
                        type: string;
                    };
                    createdAt: {
                        type: string;
                        format: string;
                    };
                };
            };
        };
    };
    ComAtprotoServerCreateInviteCode: {
        lexicon: number;
        id: string;
        defs: {
            main: {
                type: string;
                description: string;
                input: {
                    encoding: string;
                    schema: {
                        type: string;
                        required: string[];
                        properties: {
                            useCount: {
                                type: string;
                            };
                            forAccount: {
                                type: string;
                                format: string;
                            };
                        };
                    };
                };
                output: {
                    encoding: string;
                    schema: {
                        type: string;
                        required: string[];
                        properties: {
                            code: {
                                type: string;
                            };
                        };
                    };
                };
            };
        };
    };
    ComAtprotoServerCreateInviteCodes: {
        lexicon: number;
        id: string;
        defs: {
            main: {
                type: string;
                description: string;
                input: {
                    encoding: string;
                    schema: {
                        type: string;
                        required: string[];
                        properties: {
                            codeCount: {
                                type: string;
                                default: number;
                            };
                            useCount: {
                                type: string;
                            };
                            forAccounts: {
                                type: string;
                                items: {
                                    type: string;
                                    format: string;
                                };
                            };
                        };
                    };
                };
                output: {
                    encoding: string;
                    schema: {
                        type: string;
                        required: string[];
                        properties: {
                            codes: {
                                type: string;
                                items: {
                                    type: string;
                                    ref: string;
                                };
                            };
                        };
                    };
                };
            };
            accountCodes: {
                type: string;
                required: string[];
                properties: {
                    account: {
                        type: string;
                    };
                    codes: {
                        type: string;
                        items: {
                            type: string;
                        };
                    };
                };
            };
        };
    };
    ComAtprotoServerCreateSession: {
        lexicon: number;
        id: string;
        defs: {
            main: {
                type: string;
                description: string;
                input: {
                    encoding: string;
                    schema: {
                        type: string;
                        required: string[];
                        properties: {
                            identifier: {
                                type: string;
                                description: string;
                            };
                            password: {
                                type: string;
                            };
                            authFactorToken: {
                                type: string;
                            };
                        };
                    };
                };
                output: {
                    encoding: string;
                    schema: {
                        type: string;
                        required: string[];
                        properties: {
                            accessJwt: {
                                type: string;
                            };
                            refreshJwt: {
                                type: string;
                            };
                            handle: {
                                type: string;
                                format: string;
                            };
                            did: {
                                type: string;
                                format: string;
                            };
                            didDoc: {
                                type: string;
                            };
                            email: {
                                type: string;
                            };
                            emailConfirmed: {
                                type: string;
                            };
                            emailAuthFactor: {
                                type: string;
                            };
                        };
                    };
                };
                errors: {
                    name: string;
                }[];
            };
        };
    };
    ComAtprotoServerDeactivateAccount: {
        lexicon: number;
        id: string;
        defs: {
            main: {
                type: string;
                description: string;
                input: {
                    encoding: string;
                    schema: {
                        type: string;
                        properties: {
                            deleteAfter: {
                                type: string;
                                format: string;
                                description: string;
                            };
                        };
                    };
                };
            };
        };
    };
    ComAtprotoServerDefs: {
        lexicon: number;
        id: string;
        defs: {
            inviteCode: {
                type: string;
                required: string[];
                properties: {
                    code: {
                        type: string;
                    };
                    available: {
                        type: string;
                    };
                    disabled: {
                        type: string;
                    };
                    forAccount: {
                        type: string;
                    };
                    createdBy: {
                        type: string;
                    };
                    createdAt: {
                        type: string;
                        format: string;
                    };
                    uses: {
                        type: string;
                        items: {
                            type: string;
                            ref: string;
                        };
                    };
                };
            };
            inviteCodeUse: {
                type: string;
                required: string[];
                properties: {
                    usedBy: {
                        type: string;
                        format: string;
                    };
                    usedAt: {
                        type: string;
                        format: string;
                    };
                };
            };
        };
    };
    ComAtprotoServerDeleteAccount: {
        lexicon: number;
        id: string;
        defs: {
            main: {
                type: string;
                description: string;
                input: {
                    encoding: string;
                    schema: {
                        type: string;
                        required: string[];
                        properties: {
                            did: {
                                type: string;
                                format: string;
                            };
                            password: {
                                type: string;
                            };
                            token: {
                                type: string;
                            };
                        };
                    };
                };
                errors: {
                    name: string;
                }[];
            };
        };
    };
    ComAtprotoServerDeleteSession: {
        lexicon: number;
        id: string;
        defs: {
            main: {
                type: string;
                description: string;
            };
        };
    };
    ComAtprotoServerDescribeServer: {
        lexicon: number;
        id: string;
        defs: {
            main: {
                type: string;
                description: string;
                output: {
                    encoding: string;
                    schema: {
                        type: string;
                        required: string[];
                        properties: {
                            inviteCodeRequired: {
                                type: string;
                                description: string;
                            };
                            phoneVerificationRequired: {
                                type: string;
                                description: string;
                            };
                            availableUserDomains: {
                                type: string;
                                description: string;
                                items: {
                                    type: string;
                                };
                            };
                            links: {
                                type: string;
                                description: string;
                                ref: string;
                            };
                            contact: {
                                type: string;
                                description: string;
                                ref: string;
                            };
                            did: {
                                type: string;
                                format: string;
                            };
                        };
                    };
                };
            };
            links: {
                type: string;
                properties: {
                    privacyPolicy: {
                        type: string;
                        format: string;
                    };
                    termsOfService: {
                        type: string;
                        format: string;
                    };
                };
            };
            contact: {
                type: string;
                properties: {
                    email: {
                        type: string;
                    };
                };
            };
        };
    };
    ComAtprotoServerGetAccountInviteCodes: {
        lexicon: number;
        id: string;
        defs: {
            main: {
                type: string;
                description: string;
                parameters: {
                    type: string;
                    properties: {
                        includeUsed: {
                            type: string;
                            default: boolean;
                        };
                        createAvailable: {
                            type: string;
                            default: boolean;
                            description: string;
                        };
                    };
                };
                output: {
                    encoding: string;
                    schema: {
                        type: string;
                        required: string[];
                        properties: {
                            codes: {
                                type: string;
                                items: {
                                    type: string;
                                    ref: string;
                                };
                            };
                        };
                    };
                };
                errors: {
                    name: string;
                }[];
            };
        };
    };
    ComAtprotoServerGetServiceAuth: {
        lexicon: number;
        id: string;
        defs: {
            main: {
                type: string;
                description: string;
                parameters: {
                    type: string;
                    required: string[];
                    properties: {
                        aud: {
                            type: string;
                            format: string;
                            description: string;
                        };
                    };
                };
                output: {
                    encoding: string;
                    schema: {
                        type: string;
                        required: string[];
                        properties: {
                            token: {
                                type: string;
                            };
                        };
                    };
                };
            };
        };
    };
    ComAtprotoServerGetSession: {
        lexicon: number;
        id: string;
        defs: {
            main: {
                type: string;
                description: string;
                output: {
                    encoding: string;
                    schema: {
                        type: string;
                        required: string[];
                        properties: {
                            handle: {
                                type: string;
                                format: string;
                            };
                            did: {
                                type: string;
                                format: string;
                            };
                            email: {
                                type: string;
                            };
                            emailConfirmed: {
                                type: string;
                            };
                            emailAuthFactor: {
                                type: string;
                            };
                            didDoc: {
                                type: string;
                            };
                        };
                    };
                };
            };
        };
    };
    ComAtprotoServerListAppPasswords: {
        lexicon: number;
        id: string;
        defs: {
            main: {
                type: string;
                description: string;
                output: {
                    encoding: string;
                    schema: {
                        type: string;
                        required: string[];
                        properties: {
                            passwords: {
                                type: string;
                                items: {
                                    type: string;
                                    ref: string;
                                };
                            };
                        };
                    };
                };
                errors: {
                    name: string;
                }[];
            };
            appPassword: {
                type: string;
                required: string[];
                properties: {
                    name: {
                        type: string;
                    };
                    createdAt: {
                        type: string;
                        format: string;
                    };
                };
            };
        };
    };
    ComAtprotoServerRefreshSession: {
        lexicon: number;
        id: string;
        defs: {
            main: {
                type: string;
                description: string;
                output: {
                    encoding: string;
                    schema: {
                        type: string;
                        required: string[];
                        properties: {
                            accessJwt: {
                                type: string;
                            };
                            refreshJwt: {
                                type: string;
                            };
                            handle: {
                                type: string;
                                format: string;
                            };
                            did: {
                                type: string;
                                format: string;
                            };
                            didDoc: {
                                type: string;
                            };
                        };
                    };
                };
                errors: {
                    name: string;
                }[];
            };
        };
    };
    ComAtprotoServerRequestAccountDelete: {
        lexicon: number;
        id: string;
        defs: {
            main: {
                type: string;
                description: string;
            };
        };
    };
    ComAtprotoServerRequestEmailConfirmation: {
        lexicon: number;
        id: string;
        defs: {
            main: {
                type: string;
                description: string;
            };
        };
    };
    ComAtprotoServerRequestEmailUpdate: {
        lexicon: number;
        id: string;
        defs: {
            main: {
                type: string;
                description: string;
                output: {
                    encoding: string;
                    schema: {
                        type: string;
                        required: string[];
                        properties: {
                            tokenRequired: {
                                type: string;
                            };
                        };
                    };
                };
            };
        };
    };
    ComAtprotoServerRequestPasswordReset: {
        lexicon: number;
        id: string;
        defs: {
            main: {
                type: string;
                description: string;
                input: {
                    encoding: string;
                    schema: {
                        type: string;
                        required: string[];
                        properties: {
                            email: {
                                type: string;
                            };
                        };
                    };
                };
            };
        };
    };
    ComAtprotoServerReserveSigningKey: {
        lexicon: number;
        id: string;
        defs: {
            main: {
                type: string;
                description: string;
                input: {
                    encoding: string;
                    schema: {
                        type: string;
                        properties: {
                            did: {
                                type: string;
                                format: string;
                                description: string;
                            };
                        };
                    };
                };
                output: {
                    encoding: string;
                    schema: {
                        type: string;
                        required: string[];
                        properties: {
                            signingKey: {
                                type: string;
                                description: string;
                            };
                        };
                    };
                };
            };
        };
    };
    ComAtprotoServerResetPassword: {
        lexicon: number;
        id: string;
        defs: {
            main: {
                type: string;
                description: string;
                input: {
                    encoding: string;
                    schema: {
                        type: string;
                        required: string[];
                        properties: {
                            token: {
                                type: string;
                            };
                            password: {
                                type: string;
                            };
                        };
                    };
                };
                errors: {
                    name: string;
                }[];
            };
        };
    };
    ComAtprotoServerRevokeAppPassword: {
        lexicon: number;
        id: string;
        defs: {
            main: {
                type: string;
                description: string;
                input: {
                    encoding: string;
                    schema: {
                        type: string;
                        required: string[];
                        properties: {
                            name: {
                                type: string;
                            };
                        };
                    };
                };
            };
        };
    };
    ComAtprotoServerUpdateEmail: {
        lexicon: number;
        id: string;
        defs: {
            main: {
                type: string;
                description: string;
                input: {
                    encoding: string;
                    schema: {
                        type: string;
                        required: string[];
                        properties: {
                            email: {
                                type: string;
                            };
                            emailAuthFactor: {
                                type: string;
                            };
                            token: {
                                type: string;
                                description: string;
                            };
                        };
                    };
                };
                errors: {
                    name: string;
                }[];
            };
        };
    };
    ComAtprotoSyncGetBlob: {
        lexicon: number;
        id: string;
        defs: {
            main: {
                type: string;
                description: string;
                parameters: {
                    type: string;
                    required: string[];
                    properties: {
                        did: {
                            type: string;
                            format: string;
                            description: string;
                        };
                        cid: {
                            type: string;
                            format: string;
                            description: string;
                        };
                    };
                };
                output: {
                    encoding: string;
                };
            };
        };
    };
    ComAtprotoSyncGetBlocks: {
        lexicon: number;
        id: string;
        defs: {
            main: {
                type: string;
                description: string;
                parameters: {
                    type: string;
                    required: string[];
                    properties: {
                        did: {
                            type: string;
                            format: string;
                            description: string;
                        };
                        cids: {
                            type: string;
                            items: {
                                type: string;
                                format: string;
                            };
                        };
                    };
                };
                output: {
                    encoding: string;
                };
            };
        };
    };
    ComAtprotoSyncGetCheckout: {
        lexicon: number;
        id: string;
        defs: {
            main: {
                type: string;
                description: string;
                parameters: {
                    type: string;
                    required: string[];
                    properties: {
                        did: {
                            type: string;
                            format: string;
                            description: string;
                        };
                    };
                };
                output: {
                    encoding: string;
                };
            };
        };
    };
    ComAtprotoSyncGetHead: {
        lexicon: number;
        id: string;
        defs: {
            main: {
                type: string;
                description: string;
                parameters: {
                    type: string;
                    required: string[];
                    properties: {
                        did: {
                            type: string;
                            format: string;
                            description: string;
                        };
                    };
                };
                output: {
                    encoding: string;
                    schema: {
                        type: string;
                        required: string[];
                        properties: {
                            root: {
                                type: string;
                                format: string;
                            };
                        };
                    };
                };
                errors: {
                    name: string;
                }[];
            };
        };
    };
    ComAtprotoSyncGetLatestCommit: {
        lexicon: number;
        id: string;
        defs: {
            main: {
                type: string;
                description: string;
                parameters: {
                    type: string;
                    required: string[];
                    properties: {
                        did: {
                            type: string;
                            format: string;
                            description: string;
                        };
                    };
                };
                output: {
                    encoding: string;
                    schema: {
                        type: string;
                        required: string[];
                        properties: {
                            cid: {
                                type: string;
                                format: string;
                            };
                            rev: {
                                type: string;
                            };
                        };
                    };
                };
                errors: {
                    name: string;
                }[];
            };
        };
    };
    ComAtprotoSyncGetRecord: {
        lexicon: number;
        id: string;
        defs: {
            main: {
                type: string;
                description: string;
                parameters: {
                    type: string;
                    required: string[];
                    properties: {
                        did: {
                            type: string;
                            format: string;
                            description: string;
                        };
                        collection: {
                            type: string;
                            format: string;
                        };
                        rkey: {
                            type: string;
                            description: string;
                        };
                        commit: {
                            type: string;
                            format: string;
                            description: string;
                        };
                    };
                };
                output: {
                    encoding: string;
                };
            };
        };
    };
    ComAtprotoSyncGetRepo: {
        lexicon: number;
        id: string;
        defs: {
            main: {
                type: string;
                description: string;
                parameters: {
                    type: string;
                    required: string[];
                    properties: {
                        did: {
                            type: string;
                            format: string;
                            description: string;
                        };
                        since: {
                            type: string;
                            description: string;
                        };
                    };
                };
                output: {
                    encoding: string;
                };
            };
        };
    };
    ComAtprotoSyncListBlobs: {
        lexicon: number;
        id: string;
        defs: {
            main: {
                type: string;
                description: string;
                parameters: {
                    type: string;
                    required: string[];
                    properties: {
                        did: {
                            type: string;
                            format: string;
                            description: string;
                        };
                        since: {
                            type: string;
                            description: string;
                        };
                        limit: {
                            type: string;
                            minimum: number;
                            maximum: number;
                            default: number;
                        };
                        cursor: {
                            type: string;
                        };
                    };
                };
                output: {
                    encoding: string;
                    schema: {
                        type: string;
                        required: string[];
                        properties: {
                            cursor: {
                                type: string;
                            };
                            cids: {
                                type: string;
                                items: {
                                    type: string;
                                    format: string;
                                };
                            };
                        };
                    };
                };
            };
        };
    };
    ComAtprotoSyncListRepos: {
        lexicon: number;
        id: string;
        defs: {
            main: {
                type: string;
                description: string;
                parameters: {
                    type: string;
                    properties: {
                        limit: {
                            type: string;
                            minimum: number;
                            maximum: number;
                            default: number;
                        };
                        cursor: {
                            type: string;
                        };
                    };
                };
                output: {
                    encoding: string;
                    schema: {
                        type: string;
                        required: string[];
                        properties: {
                            cursor: {
                                type: string;
                            };
                            repos: {
                                type: string;
                                items: {
                                    type: string;
                                    ref: string;
                                };
                            };
                        };
                    };
                };
            };
            repo: {
                type: string;
                required: string[];
                properties: {
                    did: {
                        type: string;
                        format: string;
                    };
                    head: {
                        type: string;
                        format: string;
                        description: string;
                    };
                    rev: {
                        type: string;
                    };
                };
            };
        };
    };
    ComAtprotoSyncNotifyOfUpdate: {
        lexicon: number;
        id: string;
        defs: {
            main: {
                type: string;
                description: string;
                input: {
                    encoding: string;
                    schema: {
                        type: string;
                        required: string[];
                        properties: {
                            hostname: {
                                type: string;
                                description: string;
                            };
                        };
                    };
                };
            };
        };
    };
    ComAtprotoSyncRequestCrawl: {
        lexicon: number;
        id: string;
        defs: {
            main: {
                type: string;
                description: string;
                input: {
                    encoding: string;
                    schema: {
                        type: string;
                        required: string[];
                        properties: {
                            hostname: {
                                type: string;
                                description: string;
                            };
                        };
                    };
                };
            };
        };
    };
    ComAtprotoSyncSubscribeRepos: {
        lexicon: number;
        id: string;
        defs: {
            main: {
                type: string;
                description: string;
                parameters: {
                    type: string;
                    properties: {
                        cursor: {
                            type: string;
                            description: string;
                        };
                    };
                };
                message: {
                    schema: {
                        type: string;
                        refs: string[];
                    };
                };
                errors: ({
                    name: string;
                    description?: undefined;
                } | {
                    name: string;
                    description: string;
                })[];
            };
            commit: {
                type: string;
                description: string;
                required: string[];
                nullable: string[];
                properties: {
                    seq: {
                        type: string;
                        description: string;
                    };
                    rebase: {
                        type: string;
                        description: string;
                    };
                    tooBig: {
                        type: string;
                        description: string;
                    };
                    repo: {
                        type: string;
                        format: string;
                        description: string;
                    };
                    commit: {
                        type: string;
                        description: string;
                    };
                    prev: {
                        type: string;
                        description: string;
                    };
                    rev: {
                        type: string;
                        description: string;
                    };
                    since: {
                        type: string;
                        description: string;
                    };
                    blocks: {
                        type: string;
                        description: string;
                        maxLength: number;
                    };
                    ops: {
                        type: string;
                        items: {
                            type: string;
                            ref: string;
                            description: string;
                        };
                        maxLength: number;
                    };
                    blobs: {
                        type: string;
                        items: {
                            type: string;
                            description: string;
                        };
                    };
                    time: {
                        type: string;
                        format: string;
                        description: string;
                    };
                };
            };
            identity: {
                type: string;
                description: string;
                required: string[];
                properties: {
                    seq: {
                        type: string;
                    };
                    did: {
                        type: string;
                        format: string;
                    };
                    time: {
                        type: string;
                        format: string;
                    };
                };
            };
            handle: {
                type: string;
                description: string;
                required: string[];
                properties: {
                    seq: {
                        type: string;
                    };
                    did: {
                        type: string;
                        format: string;
                    };
                    handle: {
                        type: string;
                        format: string;
                    };
                    time: {
                        type: string;
                        format: string;
                    };
                };
            };
            migrate: {
                type: string;
                description: string;
                required: string[];
                nullable: string[];
                properties: {
                    seq: {
                        type: string;
                    };
                    did: {
                        type: string;
                        format: string;
                    };
                    migrateTo: {
                        type: string;
                    };
                    time: {
                        type: string;
                        format: string;
                    };
                };
            };
            tombstone: {
                type: string;
                description: string;
                required: string[];
                properties: {
                    seq: {
                        type: string;
                    };
                    did: {
                        type: string;
                        format: string;
                    };
                    time: {
                        type: string;
                        format: string;
                    };
                };
            };
            info: {
                type: string;
                required: string[];
                properties: {
                    name: {
                        type: string;
                        knownValues: string[];
                    };
                    message: {
                        type: string;
                    };
                };
            };
            repoOp: {
                type: string;
                description: string;
                required: string[];
                nullable: string[];
                properties: {
                    action: {
                        type: string;
                        knownValues: string[];
                    };
                    path: {
                        type: string;
                    };
                    cid: {
                        type: string;
                        description: string;
                    };
                };
            };
        };
    };
    ComAtprotoTempCheckSignupQueue: {
        lexicon: number;
        id: string;
        defs: {
            main: {
                type: string;
                description: string;
                output: {
                    encoding: string;
                    schema: {
                        type: string;
                        required: string[];
                        properties: {
                            activated: {
                                type: string;
                            };
                            placeInQueue: {
                                type: string;
                            };
                            estimatedTimeMs: {
                                type: string;
                            };
                        };
                    };
                };
            };
        };
    };
    ComAtprotoTempFetchLabels: {
        lexicon: number;
        id: string;
        defs: {
            main: {
                type: string;
                description: string;
                parameters: {
                    type: string;
                    properties: {
                        since: {
                            type: string;
                        };
                        limit: {
                            type: string;
                            minimum: number;
                            maximum: number;
                            default: number;
                        };
                    };
                };
                output: {
                    encoding: string;
                    schema: {
                        type: string;
                        required: string[];
                        properties: {
                            labels: {
                                type: string;
                                items: {
                                    type: string;
                                    ref: string;
                                };
                            };
                        };
                    };
                };
            };
        };
    };
    ComAtprotoTempRequestPhoneVerification: {
        lexicon: number;
        id: string;
        defs: {
            main: {
                type: string;
                description: string;
                input: {
                    encoding: string;
                    schema: {
                        type: string;
                        required: string[];
                        properties: {
                            phoneNumber: {
                                type: string;
                            };
                        };
                    };
                };
            };
        };
    };
    AppBskyActorDefs: {
        lexicon: number;
        id: string;
        defs: {
            profileViewBasic: {
                type: string;
                required: string[];
                properties: {
                    did: {
                        type: string;
                        format: string;
                    };
                    handle: {
                        type: string;
                        format: string;
                    };
                    displayName: {
                        type: string;
                        maxGraphemes: number;
                        maxLength: number;
                    };
                    avatar: {
                        type: string;
                        format: string;
                    };
                    associated: {
                        type: string;
                        ref: string;
                    };
                    viewer: {
                        type: string;
                        ref: string;
                    };
                    labels: {
                        type: string;
                        items: {
                            type: string;
                            ref: string;
                        };
                    };
                };
            };
            profileView: {
                type: string;
                required: string[];
                properties: {
                    did: {
                        type: string;
                        format: string;
                    };
                    handle: {
                        type: string;
                        format: string;
                    };
                    displayName: {
                        type: string;
                        maxGraphemes: number;
                        maxLength: number;
                    };
                    description: {
                        type: string;
                        maxGraphemes: number;
                        maxLength: number;
                    };
                    avatar: {
                        type: string;
                        format: string;
                    };
                    associated: {
                        type: string;
                        ref: string;
                    };
                    indexedAt: {
                        type: string;
                        format: string;
                    };
                    viewer: {
                        type: string;
                        ref: string;
                    };
                    labels: {
                        type: string;
                        items: {
                            type: string;
                            ref: string;
                        };
                    };
                };
            };
            profileViewDetailed: {
                type: string;
                required: string[];
                properties: {
                    did: {
                        type: string;
                        format: string;
                    };
                    handle: {
                        type: string;
                        format: string;
                    };
                    displayName: {
                        type: string;
                        maxGraphemes: number;
                        maxLength: number;
                    };
                    description: {
                        type: string;
                        maxGraphemes: number;
                        maxLength: number;
                    };
                    avatar: {
                        type: string;
                        format: string;
                    };
                    banner: {
                        type: string;
                        format: string;
                    };
                    followersCount: {
                        type: string;
                    };
                    followsCount: {
                        type: string;
                    };
                    postsCount: {
                        type: string;
                    };
                    associated: {
                        type: string;
                        ref: string;
                    };
                    indexedAt: {
                        type: string;
                        format: string;
                    };
                    viewer: {
                        type: string;
                        ref: string;
                    };
                    labels: {
                        type: string;
                        items: {
                            type: string;
                            ref: string;
                        };
                    };
                };
            };
            profileAssociated: {
                type: string;
                properties: {
                    lists: {
                        type: string;
                    };
                    feedgens: {
                        type: string;
                    };
                    labeler: {
                        type: string;
                    };
                };
            };
            viewerState: {
                type: string;
                description: string;
                properties: {
                    muted: {
                        type: string;
                    };
                    mutedByList: {
                        type: string;
                        ref: string;
                    };
                    blockedBy: {
                        type: string;
                    };
                    blocking: {
                        type: string;
                        format: string;
                    };
                    blockingByList: {
                        type: string;
                        ref: string;
                    };
                    following: {
                        type: string;
                        format: string;
                    };
                    followedBy: {
                        type: string;
                        format: string;
                    };
                };
            };
            preferences: {
                type: string;
                items: {
                    type: string;
                    refs: string[];
                };
            };
            adultContentPref: {
                type: string;
                required: string[];
                properties: {
                    enabled: {
                        type: string;
                        default: boolean;
                    };
                };
            };
            contentLabelPref: {
                type: string;
                required: string[];
                properties: {
                    labelerDid: {
                        type: string;
                        description: string;
                        format: string;
                    };
                    label: {
                        type: string;
                    };
                    visibility: {
                        type: string;
                        knownValues: string[];
                    };
                };
            };
            savedFeedsPref: {
                type: string;
                required: string[];
                properties: {
                    pinned: {
                        type: string;
                        items: {
                            type: string;
                            format: string;
                        };
                    };
                    saved: {
                        type: string;
                        items: {
                            type: string;
                            format: string;
                        };
                    };
                    timelineIndex: {
                        type: string;
                    };
                };
            };
            personalDetailsPref: {
                type: string;
                properties: {
                    birthDate: {
                        type: string;
                        format: string;
                        description: string;
                    };
                };
            };
            feedViewPref: {
                type: string;
                required: string[];
                properties: {
                    feed: {
                        type: string;
                        description: string;
                    };
                    hideReplies: {
                        type: string;
                        description: string;
                    };
                    hideRepliesByUnfollowed: {
                        type: string;
                        description: string;
                        default: boolean;
                    };
                    hideRepliesByLikeCount: {
                        type: string;
                        description: string;
                    };
                    hideReposts: {
                        type: string;
                        description: string;
                    };
                    hideQuotePosts: {
                        type: string;
                        description: string;
                    };
                };
            };
            threadViewPref: {
                type: string;
                properties: {
                    sort: {
                        type: string;
                        description: string;
                        knownValues: string[];
                    };
                    prioritizeFollowedUsers: {
                        type: string;
                        description: string;
                    };
                };
            };
            interestsPref: {
                type: string;
                required: string[];
                properties: {
                    tags: {
                        type: string;
                        maxLength: number;
                        items: {
                            type: string;
                            maxLength: number;
                            maxGraphemes: number;
                        };
                        description: string;
                    };
                };
            };
            mutedWordTarget: {
                type: string;
                knownValues: string[];
                maxLength: number;
                maxGraphemes: number;
            };
            mutedWord: {
                type: string;
                description: string;
                required: string[];
                properties: {
                    value: {
                        type: string;
                        description: string;
                        maxLength: number;
                        maxGraphemes: number;
                    };
                    targets: {
                        type: string;
                        description: string;
                        items: {
                            type: string;
                            ref: string;
                        };
                    };
                };
            };
            mutedWordsPref: {
                type: string;
                required: string[];
                properties: {
                    items: {
                        type: string;
                        items: {
                            type: string;
                            ref: string;
                        };
                        description: string;
                    };
                };
            };
            hiddenPostsPref: {
                type: string;
                required: string[];
                properties: {
                    items: {
                        type: string;
                        items: {
                            type: string;
                            format: string;
                        };
                        description: string;
                    };
                };
            };
            labelersPref: {
                type: string;
                required: string[];
                properties: {
                    labelers: {
                        type: string;
                        items: {
                            type: string;
                            ref: string;
                        };
                    };
                };
            };
            labelerPrefItem: {
                type: string;
                required: string[];
                properties: {
                    did: {
                        type: string;
                        format: string;
                    };
                };
            };
        };
    };
    AppBskyActorGetPreferences: {
        lexicon: number;
        id: string;
        defs: {
            main: {
                type: string;
                description: string;
                parameters: {
                    type: string;
                    properties: {};
                };
                output: {
                    encoding: string;
                    schema: {
                        type: string;
                        required: string[];
                        properties: {
                            preferences: {
                                type: string;
                                ref: string;
                            };
                        };
                    };
                };
            };
        };
    };
    AppBskyActorGetProfile: {
        lexicon: number;
        id: string;
        defs: {
            main: {
                type: string;
                description: string;
                parameters: {
                    type: string;
                    required: string[];
                    properties: {
                        actor: {
                            type: string;
                            format: string;
                            description: string;
                        };
                    };
                };
                output: {
                    encoding: string;
                    schema: {
                        type: string;
                        ref: string;
                    };
                };
            };
        };
    };
    AppBskyActorGetProfiles: {
        lexicon: number;
        id: string;
        defs: {
            main: {
                type: string;
                description: string;
                parameters: {
                    type: string;
                    required: string[];
                    properties: {
                        actors: {
                            type: string;
                            items: {
                                type: string;
                                format: string;
                            };
                            maxLength: number;
                        };
                    };
                };
                output: {
                    encoding: string;
                    schema: {
                        type: string;
                        required: string[];
                        properties: {
                            profiles: {
                                type: string;
                                items: {
                                    type: string;
                                    ref: string;
                                };
                            };
                        };
                    };
                };
            };
        };
    };
    AppBskyActorGetSuggestions: {
        lexicon: number;
        id: string;
        defs: {
            main: {
                type: string;
                description: string;
                parameters: {
                    type: string;
                    properties: {
                        limit: {
                            type: string;
                            minimum: number;
                            maximum: number;
                            default: number;
                        };
                        cursor: {
                            type: string;
                        };
                    };
                };
                output: {
                    encoding: string;
                    schema: {
                        type: string;
                        required: string[];
                        properties: {
                            cursor: {
                                type: string;
                            };
                            actors: {
                                type: string;
                                items: {
                                    type: string;
                                    ref: string;
                                };
                            };
                        };
                    };
                };
            };
        };
    };
    AppBskyActorProfile: {
        lexicon: number;
        id: string;
        defs: {
            main: {
                type: string;
                description: string;
                key: string;
                record: {
                    type: string;
                    properties: {
                        displayName: {
                            type: string;
                            maxGraphemes: number;
                            maxLength: number;
                        };
                        description: {
                            type: string;
                            description: string;
                            maxGraphemes: number;
                            maxLength: number;
                        };
                        avatar: {
                            type: string;
                            description: string;
                            accept: string[];
                            maxSize: number;
                        };
                        banner: {
                            type: string;
                            description: string;
                            accept: string[];
                            maxSize: number;
                        };
                        labels: {
                            type: string;
                            description: string;
                            refs: string[];
                        };
                    };
                };
            };
        };
    };
    AppBskyActorPutPreferences: {
        lexicon: number;
        id: string;
        defs: {
            main: {
                type: string;
                description: string;
                input: {
                    encoding: string;
                    schema: {
                        type: string;
                        required: string[];
                        properties: {
                            preferences: {
                                type: string;
                                ref: string;
                            };
                        };
                    };
                };
            };
        };
    };
    AppBskyActorSearchActors: {
        lexicon: number;
        id: string;
        defs: {
            main: {
                type: string;
                description: string;
                parameters: {
                    type: string;
                    properties: {
                        term: {
                            type: string;
                            description: string;
                        };
                        q: {
                            type: string;
                            description: string;
                        };
                        limit: {
                            type: string;
                            minimum: number;
                            maximum: number;
                            default: number;
                        };
                        cursor: {
                            type: string;
                        };
                    };
                };
                output: {
                    encoding: string;
                    schema: {
                        type: string;
                        required: string[];
                        properties: {
                            cursor: {
                                type: string;
                            };
                            actors: {
                                type: string;
                                items: {
                                    type: string;
                                    ref: string;
                                };
                            };
                        };
                    };
                };
            };
        };
    };
    AppBskyActorSearchActorsTypeahead: {
        lexicon: number;
        id: string;
        defs: {
            main: {
                type: string;
                description: string;
                parameters: {
                    type: string;
                    properties: {
                        term: {
                            type: string;
                            description: string;
                        };
                        q: {
                            type: string;
                            description: string;
                        };
                        limit: {
                            type: string;
                            minimum: number;
                            maximum: number;
                            default: number;
                        };
                    };
                };
                output: {
                    encoding: string;
                    schema: {
                        type: string;
                        required: string[];
                        properties: {
                            actors: {
                                type: string;
                                items: {
                                    type: string;
                                    ref: string;
                                };
                            };
                        };
                    };
                };
            };
        };
    };
    AppBskyEmbedExternal: {
        lexicon: number;
        id: string;
        defs: {
            main: {
                type: string;
                description: string;
                required: string[];
                properties: {
                    external: {
                        type: string;
                        ref: string;
                    };
                };
            };
            external: {
                type: string;
                required: string[];
                properties: {
                    uri: {
                        type: string;
                        format: string;
                    };
                    title: {
                        type: string;
                    };
                    description: {
                        type: string;
                    };
                    thumb: {
                        type: string;
                        accept: string[];
                        maxSize: number;
                    };
                };
            };
            view: {
                type: string;
                required: string[];
                properties: {
                    external: {
                        type: string;
                        ref: string;
                    };
                };
            };
            viewExternal: {
                type: string;
                required: string[];
                properties: {
                    uri: {
                        type: string;
                        format: string;
                    };
                    title: {
                        type: string;
                    };
                    description: {
                        type: string;
                    };
                    thumb: {
                        type: string;
                        format: string;
                    };
                };
            };
        };
    };
    AppBskyEmbedImages: {
        lexicon: number;
        id: string;
        description: string;
        defs: {
            main: {
                type: string;
                required: string[];
                properties: {
                    images: {
                        type: string;
                        items: {
                            type: string;
                            ref: string;
                        };
                        maxLength: number;
                    };
                };
            };
            image: {
                type: string;
                required: string[];
                properties: {
                    image: {
                        type: string;
                        accept: string[];
                        maxSize: number;
                    };
                    alt: {
                        type: string;
                        description: string;
                    };
                    aspectRatio: {
                        type: string;
                        ref: string;
                    };
                };
            };
            aspectRatio: {
                type: string;
                description: string;
                required: string[];
                properties: {
                    width: {
                        type: string;
                        minimum: number;
                    };
                    height: {
                        type: string;
                        minimum: number;
                    };
                };
            };
            view: {
                type: string;
                required: string[];
                properties: {
                    images: {
                        type: string;
                        items: {
                            type: string;
                            ref: string;
                        };
                        maxLength: number;
                    };
                };
            };
            viewImage: {
                type: string;
                required: string[];
                properties: {
                    thumb: {
                        type: string;
                        format: string;
                        description: string;
                    };
                    fullsize: {
                        type: string;
                        format: string;
                        description: string;
                    };
                    alt: {
                        type: string;
                        description: string;
                    };
                    aspectRatio: {
                        type: string;
                        ref: string;
                    };
                };
            };
        };
    };
    AppBskyEmbedRecord: {
        lexicon: number;
        id: string;
        description: string;
        defs: {
            main: {
                type: string;
                required: string[];
                properties: {
                    record: {
                        type: string;
                        ref: string;
                    };
                };
            };
            view: {
                type: string;
                required: string[];
                properties: {
                    record: {
                        type: string;
                        refs: string[];
                    };
                };
            };
            viewRecord: {
                type: string;
                required: string[];
                properties: {
                    uri: {
                        type: string;
                        format: string;
                    };
                    cid: {
                        type: string;
                        format: string;
                    };
                    author: {
                        type: string;
                        ref: string;
                    };
                    value: {
                        type: string;
                        description: string;
                    };
                    labels: {
                        type: string;
                        items: {
                            type: string;
                            ref: string;
                        };
                    };
                    replyCount: {
                        type: string;
                    };
                    repostCount: {
                        type: string;
                    };
                    likeCount: {
                        type: string;
                    };
                    embeds: {
                        type: string;
                        items: {
                            type: string;
                            refs: string[];
                        };
                    };
                    indexedAt: {
                        type: string;
                        format: string;
                    };
                };
            };
            viewNotFound: {
                type: string;
                required: string[];
                properties: {
                    uri: {
                        type: string;
                        format: string;
                    };
                    notFound: {
                        type: string;
                        const: boolean;
                    };
                };
            };
            viewBlocked: {
                type: string;
                required: string[];
                properties: {
                    uri: {
                        type: string;
                        format: string;
                    };
                    blocked: {
                        type: string;
                        const: boolean;
                    };
                    author: {
                        type: string;
                        ref: string;
                    };
                };
            };
        };
    };
    AppBskyEmbedRecordWithMedia: {
        lexicon: number;
        id: string;
        description: string;
        defs: {
            main: {
                type: string;
                required: string[];
                properties: {
                    record: {
                        type: string;
                        ref: string;
                    };
                    media: {
                        type: string;
                        refs: string[];
                    };
                };
            };
            view: {
                type: string;
                required: string[];
                properties: {
                    record: {
                        type: string;
                        ref: string;
                    };
                    media: {
                        type: string;
                        refs: string[];
                    };
                };
            };
        };
    };
    AppBskyFeedDefs: {
        lexicon: number;
        id: string;
        defs: {
            postView: {
                type: string;
                required: string[];
                properties: {
                    uri: {
                        type: string;
                        format: string;
                    };
                    cid: {
                        type: string;
                        format: string;
                    };
                    author: {
                        type: string;
                        ref: string;
                    };
                    record: {
                        type: string;
                    };
                    embed: {
                        type: string;
                        refs: string[];
                    };
                    replyCount: {
                        type: string;
                    };
                    repostCount: {
                        type: string;
                    };
                    likeCount: {
                        type: string;
                    };
                    indexedAt: {
                        type: string;
                        format: string;
                    };
                    viewer: {
                        type: string;
                        ref: string;
                    };
                    labels: {
                        type: string;
                        items: {
                            type: string;
                            ref: string;
                        };
                    };
                    threadgate: {
                        type: string;
                        ref: string;
                    };
                };
            };
            viewerState: {
                type: string;
                description: string;
                properties: {
                    repost: {
                        type: string;
                        format: string;
                    };
                    like: {
                        type: string;
                        format: string;
                    };
                    replyDisabled: {
                        type: string;
                    };
                };
            };
            feedViewPost: {
                type: string;
                required: string[];
                properties: {
                    post: {
                        type: string;
                        ref: string;
                    };
                    reply: {
                        type: string;
                        ref: string;
                    };
                    reason: {
                        type: string;
                        refs: string[];
                    };
                    feedContext: {
                        type: string;
                        description: string;
                        maxLength: number;
                    };
                };
            };
            replyRef: {
                type: string;
                required: string[];
                properties: {
                    root: {
                        type: string;
                        refs: string[];
                    };
                    parent: {
                        type: string;
                        refs: string[];
                    };
                };
            };
            reasonRepost: {
                type: string;
                required: string[];
                properties: {
                    by: {
                        type: string;
                        ref: string;
                    };
                    indexedAt: {
                        type: string;
                        format: string;
                    };
                };
            };
            threadViewPost: {
                type: string;
                required: string[];
                properties: {
                    post: {
                        type: string;
                        ref: string;
                    };
                    parent: {
                        type: string;
                        refs: string[];
                    };
                    replies: {
                        type: string;
                        items: {
                            type: string;
                            refs: string[];
                        };
                    };
                };
            };
            notFoundPost: {
                type: string;
                required: string[];
                properties: {
                    uri: {
                        type: string;
                        format: string;
                    };
                    notFound: {
                        type: string;
                        const: boolean;
                    };
                };
            };
            blockedPost: {
                type: string;
                required: string[];
                properties: {
                    uri: {
                        type: string;
                        format: string;
                    };
                    blocked: {
                        type: string;
                        const: boolean;
                    };
                    author: {
                        type: string;
                        ref: string;
                    };
                };
            };
            blockedAuthor: {
                type: string;
                required: string[];
                properties: {
                    did: {
                        type: string;
                        format: string;
                    };
                    viewer: {
                        type: string;
                        ref: string;
                    };
                };
            };
            generatorView: {
                type: string;
                required: string[];
                properties: {
                    uri: {
                        type: string;
                        format: string;
                    };
                    cid: {
                        type: string;
                        format: string;
                    };
                    did: {
                        type: string;
                        format: string;
                    };
                    creator: {
                        type: string;
                        ref: string;
                    };
                    displayName: {
                        type: string;
                    };
                    description: {
                        type: string;
                        maxGraphemes: number;
                        maxLength: number;
                    };
                    descriptionFacets: {
                        type: string;
                        items: {
                            type: string;
                            ref: string;
                        };
                    };
                    avatar: {
                        type: string;
                        format: string;
                    };
                    likeCount: {
                        type: string;
                        minimum: number;
                    };
                    acceptsInteractions: {
                        type: string;
                    };
                    labels: {
                        type: string;
                        items: {
                            type: string;
                            ref: string;
                        };
                    };
                    viewer: {
                        type: string;
                        ref: string;
                    };
                    indexedAt: {
                        type: string;
                        format: string;
                    };
                };
            };
            generatorViewerState: {
                type: string;
                properties: {
                    like: {
                        type: string;
                        format: string;
                    };
                };
            };
            skeletonFeedPost: {
                type: string;
                required: string[];
                properties: {
                    post: {
                        type: string;
                        format: string;
                    };
                    reason: {
                        type: string;
                        refs: string[];
                    };
                    feedContext: {
                        type: string;
                        description: string;
                        maxLength: number;
                    };
                };
            };
            skeletonReasonRepost: {
                type: string;
                required: string[];
                properties: {
                    repost: {
                        type: string;
                        format: string;
                    };
                };
            };
            threadgateView: {
                type: string;
                properties: {
                    uri: {
                        type: string;
                        format: string;
                    };
                    cid: {
                        type: string;
                        format: string;
                    };
                    record: {
                        type: string;
                    };
                    lists: {
                        type: string;
                        items: {
                            type: string;
                            ref: string;
                        };
                    };
                };
            };
            interaction: {
                type: string;
                properties: {
                    item: {
                        type: string;
                        format: string;
                    };
                    event: {
                        type: string;
                        knownValues: string[];
                    };
                    feedContext: {
                        type: string;
                        description: string;
                        maxLength: number;
                    };
                };
            };
            requestLess: {
                type: string;
                description: string;
            };
            requestMore: {
                type: string;
                description: string;
            };
            clickthroughItem: {
                type: string;
                description: string;
            };
            clickthroughAuthor: {
                type: string;
                description: string;
            };
            clickthroughReposter: {
                type: string;
                description: string;
            };
            clickthroughEmbed: {
                type: string;
                description: string;
            };
            interactionSeen: {
                type: string;
                description: string;
            };
            interactionLike: {
                type: string;
                description: string;
            };
            interactionRepost: {
                type: string;
                description: string;
            };
            interactionReply: {
                type: string;
                description: string;
            };
            interactionQuote: {
                type: string;
                description: string;
            };
            interactionShare: {
                type: string;
                description: string;
            };
        };
    };
    AppBskyFeedDescribeFeedGenerator: {
        lexicon: number;
        id: string;
        defs: {
            main: {
                type: string;
                description: string;
                output: {
                    encoding: string;
                    schema: {
                        type: string;
                        required: string[];
                        properties: {
                            did: {
                                type: string;
                                format: string;
                            };
                            feeds: {
                                type: string;
                                items: {
                                    type: string;
                                    ref: string;
                                };
                            };
                            links: {
                                type: string;
                                ref: string;
                            };
                        };
                    };
                };
            };
            feed: {
                type: string;
                required: string[];
                properties: {
                    uri: {
                        type: string;
                        format: string;
                    };
                };
            };
            links: {
                type: string;
                properties: {
                    privacyPolicy: {
                        type: string;
                    };
                    termsOfService: {
                        type: string;
                    };
                };
            };
        };
    };
    AppBskyFeedGenerator: {
        lexicon: number;
        id: string;
        defs: {
            main: {
                type: string;
                description: string;
                key: string;
                record: {
                    type: string;
                    required: string[];
                    properties: {
                        did: {
                            type: string;
                            format: string;
                        };
                        displayName: {
                            type: string;
                            maxGraphemes: number;
                            maxLength: number;
                        };
                        description: {
                            type: string;
                            maxGraphemes: number;
                            maxLength: number;
                        };
                        descriptionFacets: {
                            type: string;
                            items: {
                                type: string;
                                ref: string;
                            };
                        };
                        avatar: {
                            type: string;
                            accept: string[];
                            maxSize: number;
                        };
                        acceptsInteractions: {
                            type: string;
                            description: string;
                        };
                        labels: {
                            type: string;
                            description: string;
                            refs: string[];
                        };
                        createdAt: {
                            type: string;
                            format: string;
                        };
                    };
                };
            };
        };
    };
    AppBskyFeedGetActorFeeds: {
        lexicon: number;
        id: string;
        defs: {
            main: {
                type: string;
                description: string;
                parameters: {
                    type: string;
                    required: string[];
                    properties: {
                        actor: {
                            type: string;
                            format: string;
                        };
                        limit: {
                            type: string;
                            minimum: number;
                            maximum: number;
                            default: number;
                        };
                        cursor: {
                            type: string;
                        };
                    };
                };
                output: {
                    encoding: string;
                    schema: {
                        type: string;
                        required: string[];
                        properties: {
                            cursor: {
                                type: string;
                            };
                            feeds: {
                                type: string;
                                items: {
                                    type: string;
                                    ref: string;
                                };
                            };
                        };
                    };
                };
            };
        };
    };
    AppBskyFeedGetActorLikes: {
        lexicon: number;
        id: string;
        defs: {
            main: {
                type: string;
                description: string;
                parameters: {
                    type: string;
                    required: string[];
                    properties: {
                        actor: {
                            type: string;
                            format: string;
                        };
                        limit: {
                            type: string;
                            minimum: number;
                            maximum: number;
                            default: number;
                        };
                        cursor: {
                            type: string;
                        };
                    };
                };
                output: {
                    encoding: string;
                    schema: {
                        type: string;
                        required: string[];
                        properties: {
                            cursor: {
                                type: string;
                            };
                            feed: {
                                type: string;
                                items: {
                                    type: string;
                                    ref: string;
                                };
                            };
                        };
                    };
                };
                errors: {
                    name: string;
                }[];
            };
        };
    };
    AppBskyFeedGetAuthorFeed: {
        lexicon: number;
        id: string;
        defs: {
            main: {
                type: string;
                description: string;
                parameters: {
                    type: string;
                    required: string[];
                    properties: {
                        actor: {
                            type: string;
                            format: string;
                        };
                        limit: {
                            type: string;
                            minimum: number;
                            maximum: number;
                            default: number;
                        };
                        cursor: {
                            type: string;
                        };
                        filter: {
                            type: string;
                            description: string;
                            knownValues: string[];
                            default: string;
                        };
                    };
                };
                output: {
                    encoding: string;
                    schema: {
                        type: string;
                        required: string[];
                        properties: {
                            cursor: {
                                type: string;
                            };
                            feed: {
                                type: string;
                                items: {
                                    type: string;
                                    ref: string;
                                };
                            };
                        };
                    };
                };
                errors: {
                    name: string;
                }[];
            };
        };
    };
    AppBskyFeedGetFeed: {
        lexicon: number;
        id: string;
        defs: {
            main: {
                type: string;
                description: string;
                parameters: {
                    type: string;
                    required: string[];
                    properties: {
                        feed: {
                            type: string;
                            format: string;
                        };
                        limit: {
                            type: string;
                            minimum: number;
                            maximum: number;
                            default: number;
                        };
                        cursor: {
                            type: string;
                        };
                    };
                };
                output: {
                    encoding: string;
                    schema: {
                        type: string;
                        required: string[];
                        properties: {
                            cursor: {
                                type: string;
                            };
                            feed: {
                                type: string;
                                items: {
                                    type: string;
                                    ref: string;
                                };
                            };
                        };
                    };
                };
                errors: {
                    name: string;
                }[];
            };
        };
    };
    AppBskyFeedGetFeedGenerator: {
        lexicon: number;
        id: string;
        defs: {
            main: {
                type: string;
                description: string;
                parameters: {
                    type: string;
                    required: string[];
                    properties: {
                        feed: {
                            type: string;
                            format: string;
                            description: string;
                        };
                    };
                };
                output: {
                    encoding: string;
                    schema: {
                        type: string;
                        required: string[];
                        properties: {
                            view: {
                                type: string;
                                ref: string;
                            };
                            isOnline: {
                                type: string;
                                description: string;
                            };
                            isValid: {
                                type: string;
                                description: string;
                            };
                        };
                    };
                };
            };
        };
    };
    AppBskyFeedGetFeedGenerators: {
        lexicon: number;
        id: string;
        defs: {
            main: {
                type: string;
                description: string;
                parameters: {
                    type: string;
                    required: string[];
                    properties: {
                        feeds: {
                            type: string;
                            items: {
                                type: string;
                                format: string;
                            };
                        };
                    };
                };
                output: {
                    encoding: string;
                    schema: {
                        type: string;
                        required: string[];
                        properties: {
                            feeds: {
                                type: string;
                                items: {
                                    type: string;
                                    ref: string;
                                };
                            };
                        };
                    };
                };
            };
        };
    };
    AppBskyFeedGetFeedSkeleton: {
        lexicon: number;
        id: string;
        defs: {
            main: {
                type: string;
                description: string;
                parameters: {
                    type: string;
                    required: string[];
                    properties: {
                        feed: {
                            type: string;
                            format: string;
                            description: string;
                        };
                        limit: {
                            type: string;
                            minimum: number;
                            maximum: number;
                            default: number;
                        };
                        cursor: {
                            type: string;
                        };
                    };
                };
                output: {
                    encoding: string;
                    schema: {
                        type: string;
                        required: string[];
                        properties: {
                            cursor: {
                                type: string;
                            };
                            feed: {
                                type: string;
                                items: {
                                    type: string;
                                    ref: string;
                                };
                            };
                        };
                    };
                };
                errors: {
                    name: string;
                }[];
            };
        };
    };
    AppBskyFeedGetLikes: {
        lexicon: number;
        id: string;
        defs: {
            main: {
                type: string;
                description: string;
                parameters: {
                    type: string;
                    required: string[];
                    properties: {
                        uri: {
                            type: string;
                            format: string;
                            description: string;
                        };
                        cid: {
                            type: string;
                            format: string;
                            description: string;
                        };
                        limit: {
                            type: string;
                            minimum: number;
                            maximum: number;
                            default: number;
                        };
                        cursor: {
                            type: string;
                        };
                    };
                };
                output: {
                    encoding: string;
                    schema: {
                        type: string;
                        required: string[];
                        properties: {
                            uri: {
                                type: string;
                                format: string;
                            };
                            cid: {
                                type: string;
                                format: string;
                            };
                            cursor: {
                                type: string;
                            };
                            likes: {
                                type: string;
                                items: {
                                    type: string;
                                    ref: string;
                                };
                            };
                        };
                    };
                };
            };
            like: {
                type: string;
                required: string[];
                properties: {
                    indexedAt: {
                        type: string;
                        format: string;
                    };
                    createdAt: {
                        type: string;
                        format: string;
                    };
                    actor: {
                        type: string;
                        ref: string;
                    };
                };
            };
        };
    };
    AppBskyFeedGetListFeed: {
        lexicon: number;
        id: string;
        defs: {
            main: {
                type: string;
                description: string;
                parameters: {
                    type: string;
                    required: string[];
                    properties: {
                        list: {
                            type: string;
                            format: string;
                            description: string;
                        };
                        limit: {
                            type: string;
                            minimum: number;
                            maximum: number;
                            default: number;
                        };
                        cursor: {
                            type: string;
                        };
                    };
                };
                output: {
                    encoding: string;
                    schema: {
                        type: string;
                        required: string[];
                        properties: {
                            cursor: {
                                type: string;
                            };
                            feed: {
                                type: string;
                                items: {
                                    type: string;
                                    ref: string;
                                };
                            };
                        };
                    };
                };
                errors: {
                    name: string;
                }[];
            };
        };
    };
    AppBskyFeedGetPostThread: {
        lexicon: number;
        id: string;
        defs: {
            main: {
                type: string;
                description: string;
                parameters: {
                    type: string;
                    required: string[];
                    properties: {
                        uri: {
                            type: string;
                            format: string;
                            description: string;
                        };
                        depth: {
                            type: string;
                            description: string;
                            default: number;
                            minimum: number;
                            maximum: number;
                        };
                        parentHeight: {
                            type: string;
                            description: string;
                            default: number;
                            minimum: number;
                            maximum: number;
                        };
                    };
                };
                output: {
                    encoding: string;
                    schema: {
                        type: string;
                        required: string[];
                        properties: {
                            thread: {
                                type: string;
                                refs: string[];
                            };
                        };
                    };
                };
                errors: {
                    name: string;
                }[];
            };
        };
    };
    AppBskyFeedGetPosts: {
        lexicon: number;
        id: string;
        defs: {
            main: {
                type: string;
                description: string;
                parameters: {
                    type: string;
                    required: string[];
                    properties: {
                        uris: {
                            type: string;
                            description: string;
                            items: {
                                type: string;
                                format: string;
                            };
                            maxLength: number;
                        };
                    };
                };
                output: {
                    encoding: string;
                    schema: {
                        type: string;
                        required: string[];
                        properties: {
                            posts: {
                                type: string;
                                items: {
                                    type: string;
                                    ref: string;
                                };
                            };
                        };
                    };
                };
            };
        };
    };
    AppBskyFeedGetRepostedBy: {
        lexicon: number;
        id: string;
        defs: {
            main: {
                type: string;
                description: string;
                parameters: {
                    type: string;
                    required: string[];
                    properties: {
                        uri: {
                            type: string;
                            format: string;
                            description: string;
                        };
                        cid: {
                            type: string;
                            format: string;
                            description: string;
                        };
                        limit: {
                            type: string;
                            minimum: number;
                            maximum: number;
                            default: number;
                        };
                        cursor: {
                            type: string;
                        };
                    };
                };
                output: {
                    encoding: string;
                    schema: {
                        type: string;
                        required: string[];
                        properties: {
                            uri: {
                                type: string;
                                format: string;
                            };
                            cid: {
                                type: string;
                                format: string;
                            };
                            cursor: {
                                type: string;
                            };
                            repostedBy: {
                                type: string;
                                items: {
                                    type: string;
                                    ref: string;
                                };
                            };
                        };
                    };
                };
            };
        };
    };
    AppBskyFeedGetSuggestedFeeds: {
        lexicon: number;
        id: string;
        defs: {
            main: {
                type: string;
                description: string;
                parameters: {
                    type: string;
                    properties: {
                        limit: {
                            type: string;
                            minimum: number;
                            maximum: number;
                            default: number;
                        };
                        cursor: {
                            type: string;
                        };
                    };
                };
                output: {
                    encoding: string;
                    schema: {
                        type: string;
                        required: string[];
                        properties: {
                            cursor: {
                                type: string;
                            };
                            feeds: {
                                type: string;
                                items: {
                                    type: string;
                                    ref: string;
                                };
                            };
                        };
                    };
                };
            };
        };
    };
    AppBskyFeedGetTimeline: {
        lexicon: number;
        id: string;
        defs: {
            main: {
                type: string;
                description: string;
                parameters: {
                    type: string;
                    properties: {
                        algorithm: {
                            type: string;
                            description: string;
                        };
                        limit: {
                            type: string;
                            minimum: number;
                            maximum: number;
                            default: number;
                        };
                        cursor: {
                            type: string;
                        };
                    };
                };
                output: {
                    encoding: string;
                    schema: {
                        type: string;
                        required: string[];
                        properties: {
                            cursor: {
                                type: string;
                            };
                            feed: {
                                type: string;
                                items: {
                                    type: string;
                                    ref: string;
                                };
                            };
                        };
                    };
                };
            };
        };
    };
    AppBskyFeedLike: {
        lexicon: number;
        id: string;
        defs: {
            main: {
                type: string;
                description: string;
                key: string;
                record: {
                    type: string;
                    required: string[];
                    properties: {
                        subject: {
                            type: string;
                            ref: string;
                        };
                        createdAt: {
                            type: string;
                            format: string;
                        };
                    };
                };
            };
        };
    };
    AppBskyFeedPost: {
        lexicon: number;
        id: string;
        defs: {
            main: {
                type: string;
                description: string;
                key: string;
                record: {
                    type: string;
                    required: string[];
                    properties: {
                        text: {
                            type: string;
                            maxLength: number;
                            maxGraphemes: number;
                            description: string;
                        };
                        entities: {
                            type: string;
                            description: string;
                            items: {
                                type: string;
                                ref: string;
                            };
                        };
                        facets: {
                            type: string;
                            description: string;
                            items: {
                                type: string;
                                ref: string;
                            };
                        };
                        reply: {
                            type: string;
                            ref: string;
                        };
                        embed: {
                            type: string;
                            refs: string[];
                        };
                        langs: {
                            type: string;
                            description: string;
                            maxLength: number;
                            items: {
                                type: string;
                                format: string;
                            };
                        };
                        labels: {
                            type: string;
                            description: string;
                            refs: string[];
                        };
                        tags: {
                            type: string;
                            description: string;
                            maxLength: number;
                            items: {
                                type: string;
                                maxLength: number;
                                maxGraphemes: number;
                            };
                        };
                        createdAt: {
                            type: string;
                            format: string;
                            description: string;
                        };
                    };
                };
            };
            replyRef: {
                type: string;
                required: string[];
                properties: {
                    root: {
                        type: string;
                        ref: string;
                    };
                    parent: {
                        type: string;
                        ref: string;
                    };
                };
            };
            entity: {
                type: string;
                description: string;
                required: string[];
                properties: {
                    index: {
                        type: string;
                        ref: string;
                    };
                    type: {
                        type: string;
                        description: string;
                    };
                    value: {
                        type: string;
                    };
                };
            };
            textSlice: {
                type: string;
                description: string;
                required: string[];
                properties: {
                    start: {
                        type: string;
                        minimum: number;
                    };
                    end: {
                        type: string;
                        minimum: number;
                    };
                };
            };
        };
    };
    AppBskyFeedRepost: {
        lexicon: number;
        id: string;
        defs: {
            main: {
                description: string;
                type: string;
                key: string;
                record: {
                    type: string;
                    required: string[];
                    properties: {
                        subject: {
                            type: string;
                            ref: string;
                        };
                        createdAt: {
                            type: string;
                            format: string;
                        };
                    };
                };
            };
        };
    };
    AppBskyFeedSearchPosts: {
        lexicon: number;
        id: string;
        defs: {
            main: {
                type: string;
                description: string;
                parameters: {
                    type: string;
                    required: string[];
                    properties: {
                        q: {
                            type: string;
                            description: string;
                        };
                        sort: {
                            type: string;
                            knownValues: string[];
                            default: string;
                            description: string;
                        };
                        since: {
                            type: string;
                            description: string;
                        };
                        until: {
                            type: string;
                            description: string;
                        };
                        mentions: {
                            type: string;
                            format: string;
                            description: string;
                        };
                        author: {
                            type: string;
                            format: string;
                            description: string;
                        };
                        lang: {
                            type: string;
                            format: string;
                            description: string;
                        };
                        domain: {
                            type: string;
                            description: string;
                        };
                        url: {
                            type: string;
                            format: string;
                            description: string;
                        };
                        tag: {
                            type: string;
                            items: {
                                type: string;
                                maxLength: number;
                                maxGraphemes: number;
                            };
                            description: string;
                        };
                        limit: {
                            type: string;
                            minimum: number;
                            maximum: number;
                            default: number;
                        };
                        cursor: {
                            type: string;
                            description: string;
                        };
                    };
                };
                output: {
                    encoding: string;
                    schema: {
                        type: string;
                        required: string[];
                        properties: {
                            cursor: {
                                type: string;
                            };
                            hitsTotal: {
                                type: string;
                                description: string;
                            };
                            posts: {
                                type: string;
                                items: {
                                    type: string;
                                    ref: string;
                                };
                            };
                        };
                    };
                };
                errors: {
                    name: string;
                }[];
            };
        };
    };
    AppBskyFeedSendInteractions: {
        lexicon: number;
        id: string;
        defs: {
            main: {
                type: string;
                description: string;
                input: {
                    encoding: string;
                    schema: {
                        type: string;
                        required: string[];
                        properties: {
                            interactions: {
                                type: string;
                                items: {
                                    type: string;
                                    ref: string;
                                };
                            };
                        };
                    };
                };
                output: {
                    encoding: string;
                    schema: {
                        type: string;
                        properties: {};
                    };
                };
            };
        };
    };
    AppBskyFeedThreadgate: {
        lexicon: number;
        id: string;
        defs: {
            main: {
                type: string;
                key: string;
                description: string;
                record: {
                    type: string;
                    required: string[];
                    properties: {
                        post: {
                            type: string;
                            format: string;
                            description: string;
                        };
                        allow: {
                            type: string;
                            maxLength: number;
                            items: {
                                type: string;
                                refs: string[];
                            };
                        };
                        createdAt: {
                            type: string;
                            format: string;
                        };
                    };
                };
            };
            mentionRule: {
                type: string;
                description: string;
                properties: {};
            };
            followingRule: {
                type: string;
                description: string;
                properties: {};
            };
            listRule: {
                type: string;
                description: string;
                required: string[];
                properties: {
                    list: {
                        type: string;
                        format: string;
                    };
                };
            };
        };
    };
    AppBskyGraphBlock: {
        lexicon: number;
        id: string;
        defs: {
            main: {
                type: string;
                description: string;
                key: string;
                record: {
                    type: string;
                    required: string[];
                    properties: {
                        subject: {
                            type: string;
                            format: string;
                            description: string;
                        };
                        createdAt: {
                            type: string;
                            format: string;
                        };
                    };
                };
            };
        };
    };
    AppBskyGraphDefs: {
        lexicon: number;
        id: string;
        defs: {
            listViewBasic: {
                type: string;
                required: string[];
                properties: {
                    uri: {
                        type: string;
                        format: string;
                    };
                    cid: {
                        type: string;
                        format: string;
                    };
                    name: {
                        type: string;
                        maxLength: number;
                        minLength: number;
                    };
                    purpose: {
                        type: string;
                        ref: string;
                    };
                    avatar: {
                        type: string;
                        format: string;
                    };
                    labels: {
                        type: string;
                        items: {
                            type: string;
                            ref: string;
                        };
                    };
                    viewer: {
                        type: string;
                        ref: string;
                    };
                    indexedAt: {
                        type: string;
                        format: string;
                    };
                };
            };
            listView: {
                type: string;
                required: string[];
                properties: {
                    uri: {
                        type: string;
                        format: string;
                    };
                    cid: {
                        type: string;
                        format: string;
                    };
                    creator: {
                        type: string;
                        ref: string;
                    };
                    name: {
                        type: string;
                        maxLength: number;
                        minLength: number;
                    };
                    purpose: {
                        type: string;
                        ref: string;
                    };
                    description: {
                        type: string;
                        maxGraphemes: number;
                        maxLength: number;
                    };
                    descriptionFacets: {
                        type: string;
                        items: {
                            type: string;
                            ref: string;
                        };
                    };
                    avatar: {
                        type: string;
                        format: string;
                    };
                    labels: {
                        type: string;
                        items: {
                            type: string;
                            ref: string;
                        };
                    };
                    viewer: {
                        type: string;
                        ref: string;
                    };
                    indexedAt: {
                        type: string;
                        format: string;
                    };
                };
            };
            listItemView: {
                type: string;
                required: string[];
                properties: {
                    uri: {
                        type: string;
                        format: string;
                    };
                    subject: {
                        type: string;
                        ref: string;
                    };
                };
            };
            listPurpose: {
                type: string;
                knownValues: string[];
            };
            modlist: {
                type: string;
                description: string;
            };
            curatelist: {
                type: string;
                description: string;
            };
            listViewerState: {
                type: string;
                properties: {
                    muted: {
                        type: string;
                    };
                    blocked: {
                        type: string;
                        format: string;
                    };
                };
            };
            notFoundActor: {
                type: string;
                description: string;
                required: string[];
                properties: {
                    actor: {
                        type: string;
                        format: string;
                    };
                    notFound: {
                        type: string;
                        const: boolean;
                    };
                };
            };
            relationship: {
                type: string;
                description: string;
                required: string[];
                properties: {
                    did: {
                        type: string;
                        format: string;
                    };
                    following: {
                        type: string;
                        format: string;
                        description: string;
                    };
                    followedBy: {
                        type: string;
                        format: string;
                        description: string;
                    };
                };
            };
        };
    };
    AppBskyGraphFollow: {
        lexicon: number;
        id: string;
        defs: {
            main: {
                type: string;
                description: string;
                key: string;
                record: {
                    type: string;
                    required: string[];
                    properties: {
                        subject: {
                            type: string;
                            format: string;
                        };
                        createdAt: {
                            type: string;
                            format: string;
                        };
                    };
                };
            };
        };
    };
    AppBskyGraphGetBlocks: {
        lexicon: number;
        id: string;
        defs: {
            main: {
                type: string;
                description: string;
                parameters: {
                    type: string;
                    properties: {
                        limit: {
                            type: string;
                            minimum: number;
                            maximum: number;
                            default: number;
                        };
                        cursor: {
                            type: string;
                        };
                    };
                };
                output: {
                    encoding: string;
                    schema: {
                        type: string;
                        required: string[];
                        properties: {
                            cursor: {
                                type: string;
                            };
                            blocks: {
                                type: string;
                                items: {
                                    type: string;
                                    ref: string;
                                };
                            };
                        };
                    };
                };
            };
        };
    };
    AppBskyGraphGetFollowers: {
        lexicon: number;
        id: string;
        defs: {
            main: {
                type: string;
                description: string;
                parameters: {
                    type: string;
                    required: string[];
                    properties: {
                        actor: {
                            type: string;
                            format: string;
                        };
                        limit: {
                            type: string;
                            minimum: number;
                            maximum: number;
                            default: number;
                        };
                        cursor: {
                            type: string;
                        };
                    };
                };
                output: {
                    encoding: string;
                    schema: {
                        type: string;
                        required: string[];
                        properties: {
                            subject: {
                                type: string;
                                ref: string;
                            };
                            cursor: {
                                type: string;
                            };
                            followers: {
                                type: string;
                                items: {
                                    type: string;
                                    ref: string;
                                };
                            };
                        };
                    };
                };
            };
        };
    };
    AppBskyGraphGetFollows: {
        lexicon: number;
        id: string;
        defs: {
            main: {
                type: string;
                description: string;
                parameters: {
                    type: string;
                    required: string[];
                    properties: {
                        actor: {
                            type: string;
                            format: string;
                        };
                        limit: {
                            type: string;
                            minimum: number;
                            maximum: number;
                            default: number;
                        };
                        cursor: {
                            type: string;
                        };
                    };
                };
                output: {
                    encoding: string;
                    schema: {
                        type: string;
                        required: string[];
                        properties: {
                            subject: {
                                type: string;
                                ref: string;
                            };
                            cursor: {
                                type: string;
                            };
                            follows: {
                                type: string;
                                items: {
                                    type: string;
                                    ref: string;
                                };
                            };
                        };
                    };
                };
            };
        };
    };
    AppBskyGraphGetList: {
        lexicon: number;
        id: string;
        defs: {
            main: {
                type: string;
                description: string;
                parameters: {
                    type: string;
                    required: string[];
                    properties: {
                        list: {
                            type: string;
                            format: string;
                            description: string;
                        };
                        limit: {
                            type: string;
                            minimum: number;
                            maximum: number;
                            default: number;
                        };
                        cursor: {
                            type: string;
                        };
                    };
                };
                output: {
                    encoding: string;
                    schema: {
                        type: string;
                        required: string[];
                        properties: {
                            cursor: {
                                type: string;
                            };
                            list: {
                                type: string;
                                ref: string;
                            };
                            items: {
                                type: string;
                                items: {
                                    type: string;
                                    ref: string;
                                };
                            };
                        };
                    };
                };
            };
        };
    };
    AppBskyGraphGetListBlocks: {
        lexicon: number;
        id: string;
        defs: {
            main: {
                type: string;
                description: string;
                parameters: {
                    type: string;
                    properties: {
                        limit: {
                            type: string;
                            minimum: number;
                            maximum: number;
                            default: number;
                        };
                        cursor: {
                            type: string;
                        };
                    };
                };
                output: {
                    encoding: string;
                    schema: {
                        type: string;
                        required: string[];
                        properties: {
                            cursor: {
                                type: string;
                            };
                            lists: {
                                type: string;
                                items: {
                                    type: string;
                                    ref: string;
                                };
                            };
                        };
                    };
                };
            };
        };
    };
    AppBskyGraphGetListMutes: {
        lexicon: number;
        id: string;
        defs: {
            main: {
                type: string;
                description: string;
                parameters: {
                    type: string;
                    properties: {
                        limit: {
                            type: string;
                            minimum: number;
                            maximum: number;
                            default: number;
                        };
                        cursor: {
                            type: string;
                        };
                    };
                };
                output: {
                    encoding: string;
                    schema: {
                        type: string;
                        required: string[];
                        properties: {
                            cursor: {
                                type: string;
                            };
                            lists: {
                                type: string;
                                items: {
                                    type: string;
                                    ref: string;
                                };
                            };
                        };
                    };
                };
            };
        };
    };
    AppBskyGraphGetLists: {
        lexicon: number;
        id: string;
        defs: {
            main: {
                type: string;
                description: string;
                parameters: {
                    type: string;
                    required: string[];
                    properties: {
                        actor: {
                            type: string;
                            format: string;
                            description: string;
                        };
                        limit: {
                            type: string;
                            minimum: number;
                            maximum: number;
                            default: number;
                        };
                        cursor: {
                            type: string;
                        };
                    };
                };
                output: {
                    encoding: string;
                    schema: {
                        type: string;
                        required: string[];
                        properties: {
                            cursor: {
                                type: string;
                            };
                            lists: {
                                type: string;
                                items: {
                                    type: string;
                                    ref: string;
                                };
                            };
                        };
                    };
                };
            };
        };
    };
    AppBskyGraphGetMutes: {
        lexicon: number;
        id: string;
        defs: {
            main: {
                type: string;
                description: string;
                parameters: {
                    type: string;
                    properties: {
                        limit: {
                            type: string;
                            minimum: number;
                            maximum: number;
                            default: number;
                        };
                        cursor: {
                            type: string;
                        };
                    };
                };
                output: {
                    encoding: string;
                    schema: {
                        type: string;
                        required: string[];
                        properties: {
                            cursor: {
                                type: string;
                            };
                            mutes: {
                                type: string;
                                items: {
                                    type: string;
                                    ref: string;
                                };
                            };
                        };
                    };
                };
            };
        };
    };
    AppBskyGraphGetRelationships: {
        lexicon: number;
        id: string;
        defs: {
            main: {
                type: string;
                description: string;
                parameters: {
                    type: string;
                    required: string[];
                    properties: {
                        actor: {
                            type: string;
                            format: string;
                            description: string;
                        };
                        others: {
                            type: string;
                            description: string;
                            maxLength: number;
                            items: {
                                type: string;
                                format: string;
                            };
                        };
                    };
                };
                output: {
                    encoding: string;
                    schema: {
                        type: string;
                        required: string[];
                        properties: {
                            actor: {
                                type: string;
                                format: string;
                            };
                            relationships: {
                                type: string;
                                items: {
                                    type: string;
                                    refs: string[];
                                };
                            };
                        };
                    };
                };
                errors: {
                    name: string;
                    description: string;
                }[];
            };
        };
    };
    AppBskyGraphGetSuggestedFollowsByActor: {
        lexicon: number;
        id: string;
        defs: {
            main: {
                type: string;
                description: string;
                parameters: {
                    type: string;
                    required: string[];
                    properties: {
                        actor: {
                            type: string;
                            format: string;
                        };
                    };
                };
                output: {
                    encoding: string;
                    schema: {
                        type: string;
                        required: string[];
                        properties: {
                            suggestions: {
                                type: string;
                                items: {
                                    type: string;
                                    ref: string;
                                };
                            };
                        };
                    };
                };
            };
        };
    };
    AppBskyGraphList: {
        lexicon: number;
        id: string;
        defs: {
            main: {
                type: string;
                description: string;
                key: string;
                record: {
                    type: string;
                    required: string[];
                    properties: {
                        purpose: {
                            type: string;
                            description: string;
                            ref: string;
                        };
                        name: {
                            type: string;
                            maxLength: number;
                            minLength: number;
                            description: string;
                        };
                        description: {
                            type: string;
                            maxGraphemes: number;
                            maxLength: number;
                        };
                        descriptionFacets: {
                            type: string;
                            items: {
                                type: string;
                                ref: string;
                            };
                        };
                        avatar: {
                            type: string;
                            accept: string[];
                            maxSize: number;
                        };
                        labels: {
                            type: string;
                            refs: string[];
                        };
                        createdAt: {
                            type: string;
                            format: string;
                        };
                    };
                };
            };
        };
    };
    AppBskyGraphListblock: {
        lexicon: number;
        id: string;
        defs: {
            main: {
                type: string;
                description: string;
                key: string;
                record: {
                    type: string;
                    required: string[];
                    properties: {
                        subject: {
                            type: string;
                            format: string;
                            description: string;
                        };
                        createdAt: {
                            type: string;
                            format: string;
                        };
                    };
                };
            };
        };
    };
    AppBskyGraphListitem: {
        lexicon: number;
        id: string;
        defs: {
            main: {
                type: string;
                description: string;
                key: string;
                record: {
                    type: string;
                    required: string[];
                    properties: {
                        subject: {
                            type: string;
                            format: string;
                            description: string;
                        };
                        list: {
                            type: string;
                            format: string;
                            description: string;
                        };
                        createdAt: {
                            type: string;
                            format: string;
                        };
                    };
                };
            };
        };
    };
    AppBskyGraphMuteActor: {
        lexicon: number;
        id: string;
        defs: {
            main: {
                type: string;
                description: string;
                input: {
                    encoding: string;
                    schema: {
                        type: string;
                        required: string[];
                        properties: {
                            actor: {
                                type: string;
                                format: string;
                            };
                        };
                    };
                };
            };
        };
    };
    AppBskyGraphMuteActorList: {
        lexicon: number;
        id: string;
        defs: {
            main: {
                type: string;
                description: string;
                input: {
                    encoding: string;
                    schema: {
                        type: string;
                        required: string[];
                        properties: {
                            list: {
                                type: string;
                                format: string;
                            };
                        };
                    };
                };
            };
        };
    };
    AppBskyGraphUnmuteActor: {
        lexicon: number;
        id: string;
        defs: {
            main: {
                type: string;
                description: string;
                input: {
                    encoding: string;
                    schema: {
                        type: string;
                        required: string[];
                        properties: {
                            actor: {
                                type: string;
                                format: string;
                            };
                        };
                    };
                };
            };
        };
    };
    AppBskyGraphUnmuteActorList: {
        lexicon: number;
        id: string;
        defs: {
            main: {
                type: string;
                description: string;
                input: {
                    encoding: string;
                    schema: {
                        type: string;
                        required: string[];
                        properties: {
                            list: {
                                type: string;
                                format: string;
                            };
                        };
                    };
                };
            };
        };
    };
    AppBskyLabelerDefs: {
        lexicon: number;
        id: string;
        defs: {
            labelerView: {
                type: string;
                required: string[];
                properties: {
                    uri: {
                        type: string;
                        format: string;
                    };
                    cid: {
                        type: string;
                        format: string;
                    };
                    creator: {
                        type: string;
                        ref: string;
                    };
                    likeCount: {
                        type: string;
                        minimum: number;
                    };
                    viewer: {
                        type: string;
                        ref: string;
                    };
                    indexedAt: {
                        type: string;
                        format: string;
                    };
                    labels: {
                        type: string;
                        items: {
                            type: string;
                            ref: string;
                        };
                    };
                };
            };
            labelerViewDetailed: {
                type: string;
                required: string[];
                properties: {
                    uri: {
                        type: string;
                        format: string;
                    };
                    cid: {
                        type: string;
                        format: string;
                    };
                    creator: {
                        type: string;
                        ref: string;
                    };
                    policies: {
                        type: string;
                        ref: string;
                    };
                    likeCount: {
                        type: string;
                        minimum: number;
                    };
                    viewer: {
                        type: string;
                        ref: string;
                    };
                    indexedAt: {
                        type: string;
                        format: string;
                    };
                    labels: {
                        type: string;
                        items: {
                            type: string;
                            ref: string;
                        };
                    };
                };
            };
            labelerViewerState: {
                type: string;
                properties: {
                    like: {
                        type: string;
                        format: string;
                    };
                };
            };
            labelerPolicies: {
                type: string;
                required: string[];
                properties: {
                    labelValues: {
                        type: string;
                        description: string;
                        items: {
                            type: string;
                            ref: string;
                        };
                    };
                    labelValueDefinitions: {
                        type: string;
                        description: string;
                        items: {
                            type: string;
                            ref: string;
                        };
                    };
                };
            };
        };
    };
    AppBskyLabelerGetServices: {
        lexicon: number;
        id: string;
        defs: {
            main: {
                type: string;
                description: string;
                parameters: {
                    type: string;
                    required: string[];
                    properties: {
                        dids: {
                            type: string;
                            items: {
                                type: string;
                                format: string;
                            };
                        };
                        detailed: {
                            type: string;
                            default: boolean;
                        };
                    };
                };
                output: {
                    encoding: string;
                    schema: {
                        type: string;
                        required: string[];
                        properties: {
                            views: {
                                type: string;
                                items: {
                                    type: string;
                                    refs: string[];
                                };
                            };
                        };
                    };
                };
            };
        };
    };
    AppBskyLabelerService: {
        lexicon: number;
        id: string;
        defs: {
            main: {
                type: string;
                description: string;
                key: string;
                record: {
                    type: string;
                    required: string[];
                    properties: {
                        policies: {
                            type: string;
                            ref: string;
                        };
                        labels: {
                            type: string;
                            refs: string[];
                        };
                        createdAt: {
                            type: string;
                            format: string;
                        };
                    };
                };
            };
        };
    };
    AppBskyNotificationGetUnreadCount: {
        lexicon: number;
        id: string;
        defs: {
            main: {
                type: string;
                description: string;
                parameters: {
                    type: string;
                    properties: {
                        seenAt: {
                            type: string;
                            format: string;
                        };
                    };
                };
                output: {
                    encoding: string;
                    schema: {
                        type: string;
                        required: string[];
                        properties: {
                            count: {
                                type: string;
                            };
                        };
                    };
                };
            };
        };
    };
    AppBskyNotificationListNotifications: {
        lexicon: number;
        id: string;
        defs: {
            main: {
                type: string;
                description: string;
                parameters: {
                    type: string;
                    properties: {
                        limit: {
                            type: string;
                            minimum: number;
                            maximum: number;
                            default: number;
                        };
                        cursor: {
                            type: string;
                        };
                        seenAt: {
                            type: string;
                            format: string;
                        };
                    };
                };
                output: {
                    encoding: string;
                    schema: {
                        type: string;
                        required: string[];
                        properties: {
                            cursor: {
                                type: string;
                            };
                            notifications: {
                                type: string;
                                items: {
                                    type: string;
                                    ref: string;
                                };
                            };
                            seenAt: {
                                type: string;
                                format: string;
                            };
                        };
                    };
                };
            };
            notification: {
                type: string;
                required: string[];
                properties: {
                    uri: {
                        type: string;
                        format: string;
                    };
                    cid: {
                        type: string;
                        format: string;
                    };
                    author: {
                        type: string;
                        ref: string;
                    };
                    reason: {
                        type: string;
                        description: string;
                        knownValues: string[];
                    };
                    reasonSubject: {
                        type: string;
                        format: string;
                    };
                    record: {
                        type: string;
                    };
                    isRead: {
                        type: string;
                    };
                    indexedAt: {
                        type: string;
                        format: string;
                    };
                    labels: {
                        type: string;
                        items: {
                            type: string;
                            ref: string;
                        };
                    };
                };
            };
        };
    };
    AppBskyNotificationRegisterPush: {
        lexicon: number;
        id: string;
        defs: {
            main: {
                type: string;
                description: string;
                input: {
                    encoding: string;
                    schema: {
                        type: string;
                        required: string[];
                        properties: {
                            serviceDid: {
                                type: string;
                                format: string;
                            };
                            token: {
                                type: string;
                            };
                            platform: {
                                type: string;
                                knownValues: string[];
                            };
                            appId: {
                                type: string;
                            };
                        };
                    };
                };
            };
        };
    };
    AppBskyNotificationUpdateSeen: {
        lexicon: number;
        id: string;
        defs: {
            main: {
                type: string;
                description: string;
                input: {
                    encoding: string;
                    schema: {
                        type: string;
                        required: string[];
                        properties: {
                            seenAt: {
                                type: string;
                                format: string;
                            };
                        };
                    };
                };
            };
        };
    };
    AppBskyRichtextFacet: {
        lexicon: number;
        id: string;
        defs: {
            main: {
                type: string;
                description: string;
                required: string[];
                properties: {
                    index: {
                        type: string;
                        ref: string;
                    };
                    features: {
                        type: string;
                        items: {
                            type: string;
                            refs: string[];
                        };
                    };
                };
            };
            mention: {
                type: string;
                description: string;
                required: string[];
                properties: {
                    did: {
                        type: string;
                        format: string;
                    };
                };
            };
            link: {
                type: string;
                description: string;
                required: string[];
                properties: {
                    uri: {
                        type: string;
                        format: string;
                    };
                };
            };
            tag: {
                type: string;
                description: string;
                required: string[];
                properties: {
                    tag: {
                        type: string;
                        maxLength: number;
                        maxGraphemes: number;
                    };
                };
            };
            byteSlice: {
                type: string;
                description: string;
                required: string[];
                properties: {
                    byteStart: {
                        type: string;
                        minimum: number;
                    };
                    byteEnd: {
                        type: string;
                        minimum: number;
                    };
                };
            };
        };
    };
    AppBskyUnspeccedDefs: {
        lexicon: number;
        id: string;
        defs: {
            skeletonSearchPost: {
                type: string;
                required: string[];
                properties: {
                    uri: {
                        type: string;
                        format: string;
                    };
                };
            };
            skeletonSearchActor: {
                type: string;
                required: string[];
                properties: {
                    did: {
                        type: string;
                        format: string;
                    };
                };
            };
        };
    };
    AppBskyUnspeccedGetPopularFeedGenerators: {
        lexicon: number;
        id: string;
        defs: {
            main: {
                type: string;
                description: string;
                parameters: {
                    type: string;
                    properties: {
                        limit: {
                            type: string;
                            minimum: number;
                            maximum: number;
                            default: number;
                        };
                        cursor: {
                            type: string;
                        };
                        query: {
                            type: string;
                        };
                    };
                };
                output: {
                    encoding: string;
                    schema: {
                        type: string;
                        required: string[];
                        properties: {
                            cursor: {
                                type: string;
                            };
                            feeds: {
                                type: string;
                                items: {
                                    type: string;
                                    ref: string;
                                };
                            };
                        };
                    };
                };
            };
        };
    };
    AppBskyUnspeccedGetSuggestionsSkeleton: {
        lexicon: number;
        id: string;
        defs: {
            main: {
                type: string;
                description: string;
                parameters: {
                    type: string;
                    properties: {
                        viewer: {
                            type: string;
                            format: string;
                            description: string;
                        };
                        limit: {
                            type: string;
                            minimum: number;
                            maximum: number;
                            default: number;
                        };
                        cursor: {
                            type: string;
                        };
                    };
                };
                output: {
                    encoding: string;
                    schema: {
                        type: string;
                        required: string[];
                        properties: {
                            cursor: {
                                type: string;
                            };
                            actors: {
                                type: string;
                                items: {
                                    type: string;
                                    ref: string;
                                };
                            };
                        };
                    };
                };
            };
        };
    };
    AppBskyUnspeccedGetTaggedSuggestions: {
        lexicon: number;
        id: string;
        defs: {
            main: {
                type: string;
                description: string;
                parameters: {
                    type: string;
                    properties: {};
                };
                output: {
                    encoding: string;
                    schema: {
                        type: string;
                        required: string[];
                        properties: {
                            suggestions: {
                                type: string;
                                items: {
                                    type: string;
                                    ref: string;
                                };
                            };
                        };
                    };
                };
            };
            suggestion: {
                type: string;
                required: string[];
                properties: {
                    tag: {
                        type: string;
                    };
                    subjectType: {
                        type: string;
                        knownValues: string[];
                    };
                    subject: {
                        type: string;
                        format: string;
                    };
                };
            };
        };
    };
    AppBskyUnspeccedSearchActorsSkeleton: {
        lexicon: number;
        id: string;
        defs: {
            main: {
                type: string;
                description: string;
                parameters: {
                    type: string;
                    required: string[];
                    properties: {
                        q: {
                            type: string;
                            description: string;
                        };
                        viewer: {
                            type: string;
                            format: string;
                            description: string;
                        };
                        typeahead: {
                            type: string;
                            description: string;
                        };
                        limit: {
                            type: string;
                            minimum: number;
                            maximum: number;
                            default: number;
                        };
                        cursor: {
                            type: string;
                            description: string;
                        };
                    };
                };
                output: {
                    encoding: string;
                    schema: {
                        type: string;
                        required: string[];
                        properties: {
                            cursor: {
                                type: string;
                            };
                            hitsTotal: {
                                type: string;
                                description: string;
                            };
                            actors: {
                                type: string;
                                items: {
                                    type: string;
                                    ref: string;
                                };
                            };
                        };
                    };
                };
                errors: {
                    name: string;
                }[];
            };
        };
    };
    AppBskyUnspeccedSearchPostsSkeleton: {
        lexicon: number;
        id: string;
        defs: {
            main: {
                type: string;
                description: string;
                parameters: {
                    type: string;
                    required: string[];
                    properties: {
                        q: {
                            type: string;
                            description: string;
                        };
                        sort: {
                            type: string;
                            knownValues: string[];
                            default: string;
                            description: string;
                        };
                        since: {
                            type: string;
                            description: string;
                        };
                        until: {
                            type: string;
                            description: string;
                        };
                        mentions: {
                            type: string;
                            format: string;
                            description: string;
                        };
                        author: {
                            type: string;
                            format: string;
                            description: string;
                        };
                        lang: {
                            type: string;
                            format: string;
                            description: string;
                        };
                        domain: {
                            type: string;
                            description: string;
                        };
                        url: {
                            type: string;
                            format: string;
                            description: string;
                        };
                        tag: {
                            type: string;
                            items: {
                                type: string;
                                maxLength: number;
                                maxGraphemes: number;
                            };
                            description: string;
                        };
                        viewer: {
                            type: string;
                            format: string;
                            description: string;
                        };
                        limit: {
                            type: string;
                            minimum: number;
                            maximum: number;
                            default: number;
                        };
                        cursor: {
                            type: string;
                            description: string;
                        };
                    };
                };
                output: {
                    encoding: string;
                    schema: {
                        type: string;
                        required: string[];
                        properties: {
                            cursor: {
                                type: string;
                            };
                            hitsTotal: {
                                type: string;
                                description: string;
                            };
                            posts: {
                                type: string;
                                items: {
                                    type: string;
                                    ref: string;
                                };
                            };
                        };
                    };
                };
                errors: {
                    name: string;
                }[];
            };
        };
    };
    ToolsOzoneCommunicationCreateTemplate: {
        lexicon: number;
        id: string;
        defs: {
            main: {
                type: string;
                description: string;
                input: {
                    encoding: string;
                    schema: {
                        type: string;
                        required: string[];
                        properties: {
                            name: {
                                type: string;
                                description: string;
                            };
                            contentMarkdown: {
                                type: string;
                                description: string;
                            };
                            subject: {
                                type: string;
                                description: string;
                            };
                            createdBy: {
                                type: string;
                                format: string;
                                description: string;
                            };
                        };
                    };
                };
                output: {
                    encoding: string;
                    schema: {
                        type: string;
                        ref: string;
                    };
                };
            };
        };
    };
    ToolsOzoneCommunicationDefs: {
        lexicon: number;
        id: string;
        defs: {
            templateView: {
                type: string;
                required: string[];
                properties: {
                    id: {
                        type: string;
                    };
                    name: {
                        type: string;
                        description: string;
                    };
                    subject: {
                        type: string;
                        description: string;
                    };
                    contentMarkdown: {
                        type: string;
                        description: string;
                    };
                    disabled: {
                        type: string;
                    };
                    lastUpdatedBy: {
                        type: string;
                        format: string;
                        description: string;
                    };
                    createdAt: {
                        type: string;
                        format: string;
                    };
                    updatedAt: {
                        type: string;
                        format: string;
                    };
                };
            };
        };
    };
    ToolsOzoneCommunicationDeleteTemplate: {
        lexicon: number;
        id: string;
        defs: {
            main: {
                type: string;
                description: string;
                input: {
                    encoding: string;
                    schema: {
                        type: string;
                        required: string[];
                        properties: {
                            id: {
                                type: string;
                            };
                        };
                    };
                };
            };
        };
    };
    ToolsOzoneCommunicationListTemplates: {
        lexicon: number;
        id: string;
        defs: {
            main: {
                type: string;
                description: string;
                output: {
                    encoding: string;
                    schema: {
                        type: string;
                        required: string[];
                        properties: {
                            communicationTemplates: {
                                type: string;
                                items: {
                                    type: string;
                                    ref: string;
                                };
                            };
                        };
                    };
                };
            };
        };
    };
    ToolsOzoneCommunicationUpdateTemplate: {
        lexicon: number;
        id: string;
        defs: {
            main: {
                type: string;
                description: string;
                input: {
                    encoding: string;
                    schema: {
                        type: string;
                        required: string[];
                        properties: {
                            id: {
                                type: string;
                                description: string;
                            };
                            name: {
                                type: string;
                                description: string;
                            };
                            contentMarkdown: {
                                type: string;
                                description: string;
                            };
                            subject: {
                                type: string;
                                description: string;
                            };
                            updatedBy: {
                                type: string;
                                format: string;
                                description: string;
                            };
                            disabled: {
                                type: string;
                            };
                        };
                    };
                };
                output: {
                    encoding: string;
                    schema: {
                        type: string;
                        ref: string;
                    };
                };
            };
        };
    };
    ToolsOzoneModerationDefs: {
        lexicon: number;
        id: string;
        defs: {
            modEventView: {
                type: string;
                required: string[];
                properties: {
                    id: {
                        type: string;
                    };
                    event: {
                        type: string;
                        refs: string[];
                    };
                    subject: {
                        type: string;
                        refs: string[];
                    };
                    subjectBlobCids: {
                        type: string;
                        items: {
                            type: string;
                        };
                    };
                    createdBy: {
                        type: string;
                        format: string;
                    };
                    createdAt: {
                        type: string;
                        format: string;
                    };
                    creatorHandle: {
                        type: string;
                    };
                    subjectHandle: {
                        type: string;
                    };
                };
            };
            modEventViewDetail: {
                type: string;
                required: string[];
                properties: {
                    id: {
                        type: string;
                    };
                    event: {
                        type: string;
                        refs: string[];
                    };
                    subject: {
                        type: string;
                        refs: string[];
                    };
                    subjectBlobs: {
                        type: string;
                        items: {
                            type: string;
                            ref: string;
                        };
                    };
                    createdBy: {
                        type: string;
                        format: string;
                    };
                    createdAt: {
                        type: string;
                        format: string;
                    };
                };
            };
            subjectStatusView: {
                type: string;
                required: string[];
                properties: {
                    id: {
                        type: string;
                    };
                    subject: {
                        type: string;
                        refs: string[];
                    };
                    subjectBlobCids: {
                        type: string;
                        items: {
                            type: string;
                            format: string;
                        };
                    };
                    subjectRepoHandle: {
                        type: string;
                    };
                    updatedAt: {
                        type: string;
                        format: string;
                        description: string;
                    };
                    createdAt: {
                        type: string;
                        format: string;
                        description: string;
                    };
                    reviewState: {
                        type: string;
                        ref: string;
                    };
                    comment: {
                        type: string;
                        description: string;
                    };
                    muteUntil: {
                        type: string;
                        format: string;
                    };
                    lastReviewedBy: {
                        type: string;
                        format: string;
                    };
                    lastReviewedAt: {
                        type: string;
                        format: string;
                    };
                    lastReportedAt: {
                        type: string;
                        format: string;
                    };
                    lastAppealedAt: {
                        type: string;
                        format: string;
                        description: string;
                    };
                    takendown: {
                        type: string;
                    };
                    appealed: {
                        type: string;
                        description: string;
                    };
                    suspendUntil: {
                        type: string;
                        format: string;
                    };
                    tags: {
                        type: string;
                        items: {
                            type: string;
                        };
                    };
                };
            };
            subjectReviewState: {
                type: string;
                knownValues: string[];
            };
            reviewOpen: {
                type: string;
                description: string;
            };
            reviewEscalated: {
                type: string;
                description: string;
            };
            reviewClosed: {
                type: string;
                description: string;
            };
            reviewNone: {
                type: string;
                description: string;
            };
            modEventTakedown: {
                type: string;
                description: string;
                properties: {
                    comment: {
                        type: string;
                    };
                    durationInHours: {
                        type: string;
                        description: string;
                    };
                };
            };
            modEventReverseTakedown: {
                type: string;
                description: string;
                properties: {
                    comment: {
                        type: string;
                        description: string;
                    };
                };
            };
            modEventResolveAppeal: {
                type: string;
                description: string;
                properties: {
                    comment: {
                        type: string;
                        description: string;
                    };
                };
            };
            modEventComment: {
                type: string;
                description: string;
                required: string[];
                properties: {
                    comment: {
                        type: string;
                    };
                    sticky: {
                        type: string;
                        description: string;
                    };
                };
            };
            modEventReport: {
                type: string;
                description: string;
                required: string[];
                properties: {
                    comment: {
                        type: string;
                    };
                    reportType: {
                        type: string;
                        ref: string;
                    };
                };
            };
            modEventLabel: {
                type: string;
                description: string;
                required: string[];
                properties: {
                    comment: {
                        type: string;
                    };
                    createLabelVals: {
                        type: string;
                        items: {
                            type: string;
                        };
                    };
                    negateLabelVals: {
                        type: string;
                        items: {
                            type: string;
                        };
                    };
                };
            };
            modEventAcknowledge: {
                type: string;
                properties: {
                    comment: {
                        type: string;
                    };
                };
            };
            modEventEscalate: {
                type: string;
                properties: {
                    comment: {
                        type: string;
                    };
                };
            };
            modEventMute: {
                type: string;
                description: string;
                required: string[];
                properties: {
                    comment: {
                        type: string;
                    };
                    durationInHours: {
                        type: string;
                        description: string;
                    };
                };
            };
            modEventUnmute: {
                type: string;
                description: string;
                properties: {
                    comment: {
                        type: string;
                        description: string;
                    };
                };
            };
            modEventEmail: {
                type: string;
                description: string;
                required: string[];
                properties: {
                    subjectLine: {
                        type: string;
                        description: string;
                    };
                    content: {
                        type: string;
                        description: string;
                    };
                    comment: {
                        type: string;
                        description: string;
                    };
                };
            };
            modEventDivert: {
                type: string;
                description: string;
                properties: {
                    comment: {
                        type: string;
                    };
                };
            };
            modEventTag: {
                type: string;
                description: string;
                required: string[];
                properties: {
                    add: {
                        type: string;
                        items: {
                            type: string;
                        };
                        description: string;
                    };
                    remove: {
                        type: string;
                        items: {
                            type: string;
                        };
                        description: string;
                    };
                    comment: {
                        type: string;
                        description: string;
                    };
                };
            };
            repoView: {
                type: string;
                required: string[];
                properties: {
                    did: {
                        type: string;
                        format: string;
                    };
                    handle: {
                        type: string;
                        format: string;
                    };
                    email: {
                        type: string;
                    };
                    relatedRecords: {
                        type: string;
                        items: {
                            type: string;
                        };
                    };
                    indexedAt: {
                        type: string;
                        format: string;
                    };
                    moderation: {
                        type: string;
                        ref: string;
                    };
                    invitedBy: {
                        type: string;
                        ref: string;
                    };
                    invitesDisabled: {
                        type: string;
                    };
                    inviteNote: {
                        type: string;
                    };
                };
            };
            repoViewDetail: {
                type: string;
                required: string[];
                properties: {
                    did: {
                        type: string;
                        format: string;
                    };
                    handle: {
                        type: string;
                        format: string;
                    };
                    email: {
                        type: string;
                    };
                    relatedRecords: {
                        type: string;
                        items: {
                            type: string;
                        };
                    };
                    indexedAt: {
                        type: string;
                        format: string;
                    };
                    moderation: {
                        type: string;
                        ref: string;
                    };
                    labels: {
                        type: string;
                        items: {
                            type: string;
                            ref: string;
                        };
                    };
                    invitedBy: {
                        type: string;
                        ref: string;
                    };
                    invites: {
                        type: string;
                        items: {
                            type: string;
                            ref: string;
                        };
                    };
                    invitesDisabled: {
                        type: string;
                    };
                    inviteNote: {
                        type: string;
                    };
                    emailConfirmedAt: {
                        type: string;
                        format: string;
                    };
                };
            };
            repoViewNotFound: {
                type: string;
                required: string[];
                properties: {
                    did: {
                        type: string;
                        format: string;
                    };
                };
            };
            recordView: {
                type: string;
                required: string[];
                properties: {
                    uri: {
                        type: string;
                        format: string;
                    };
                    cid: {
                        type: string;
                        format: string;
                    };
                    value: {
                        type: string;
                    };
                    blobCids: {
                        type: string;
                        items: {
                            type: string;
                            format: string;
                        };
                    };
                    indexedAt: {
                        type: string;
                        format: string;
                    };
                    moderation: {
                        type: string;
                        ref: string;
                    };
                    repo: {
                        type: string;
                        ref: string;
                    };
                };
            };
            recordViewDetail: {
                type: string;
                required: string[];
                properties: {
                    uri: {
                        type: string;
                        format: string;
                    };
                    cid: {
                        type: string;
                        format: string;
                    };
                    value: {
                        type: string;
                    };
                    blobs: {
                        type: string;
                        items: {
                            type: string;
                            ref: string;
                        };
                    };
                    labels: {
                        type: string;
                        items: {
                            type: string;
                            ref: string;
                        };
                    };
                    indexedAt: {
                        type: string;
                        format: string;
                    };
                    moderation: {
                        type: string;
                        ref: string;
                    };
                    repo: {
                        type: string;
                        ref: string;
                    };
                };
            };
            recordViewNotFound: {
                type: string;
                required: string[];
                properties: {
                    uri: {
                        type: string;
                        format: string;
                    };
                };
            };
            moderation: {
                type: string;
                properties: {
                    subjectStatus: {
                        type: string;
                        ref: string;
                    };
                };
            };
            moderationDetail: {
                type: string;
                properties: {
                    subjectStatus: {
                        type: string;
                        ref: string;
                    };
                };
            };
            blobView: {
                type: string;
                required: string[];
                properties: {
                    cid: {
                        type: string;
                        format: string;
                    };
                    mimeType: {
                        type: string;
                    };
                    size: {
                        type: string;
                    };
                    createdAt: {
                        type: string;
                        format: string;
                    };
                    details: {
                        type: string;
                        refs: string[];
                    };
                    moderation: {
                        type: string;
                        ref: string;
                    };
                };
            };
            imageDetails: {
                type: string;
                required: string[];
                properties: {
                    width: {
                        type: string;
                    };
                    height: {
                        type: string;
                    };
                };
            };
            videoDetails: {
                type: string;
                required: string[];
                properties: {
                    width: {
                        type: string;
                    };
                    height: {
                        type: string;
                    };
                    length: {
                        type: string;
                    };
                };
            };
        };
    };
    ToolsOzoneModerationEmitEvent: {
        lexicon: number;
        id: string;
        defs: {
            main: {
                type: string;
                description: string;
                input: {
                    encoding: string;
                    schema: {
                        type: string;
                        required: string[];
                        properties: {
                            event: {
                                type: string;
                                refs: string[];
                            };
                            subject: {
                                type: string;
                                refs: string[];
                            };
                            subjectBlobCids: {
                                type: string;
                                items: {
                                    type: string;
                                    format: string;
                                };
                            };
                            createdBy: {
                                type: string;
                                format: string;
                            };
                        };
                    };
                };
                output: {
                    encoding: string;
                    schema: {
                        type: string;
                        ref: string;
                    };
                };
                errors: {
                    name: string;
                }[];
            };
        };
    };
    ToolsOzoneModerationGetEvent: {
        lexicon: number;
        id: string;
        defs: {
            main: {
                type: string;
                description: string;
                parameters: {
                    type: string;
                    required: string[];
                    properties: {
                        id: {
                            type: string;
                        };
                    };
                };
                output: {
                    encoding: string;
                    schema: {
                        type: string;
                        ref: string;
                    };
                };
            };
        };
    };
    ToolsOzoneModerationGetRecord: {
        lexicon: number;
        id: string;
        defs: {
            main: {
                type: string;
                description: string;
                parameters: {
                    type: string;
                    required: string[];
                    properties: {
                        uri: {
                            type: string;
                            format: string;
                        };
                        cid: {
                            type: string;
                            format: string;
                        };
                    };
                };
                output: {
                    encoding: string;
                    schema: {
                        type: string;
                        ref: string;
                    };
                };
                errors: {
                    name: string;
                }[];
            };
        };
    };
    ToolsOzoneModerationGetRepo: {
        lexicon: number;
        id: string;
        defs: {
            main: {
                type: string;
                description: string;
                parameters: {
                    type: string;
                    required: string[];
                    properties: {
                        did: {
                            type: string;
                            format: string;
                        };
                    };
                };
                output: {
                    encoding: string;
                    schema: {
                        type: string;
                        ref: string;
                    };
                };
                errors: {
                    name: string;
                }[];
            };
        };
    };
    ToolsOzoneModerationQueryEvents: {
        lexicon: number;
        id: string;
        defs: {
            main: {
                type: string;
                description: string;
                parameters: {
                    type: string;
                    properties: {
                        types: {
                            type: string;
                            items: {
                                type: string;
                            };
                            description: string;
                        };
                        createdBy: {
                            type: string;
                            format: string;
                        };
                        sortDirection: {
                            type: string;
                            default: string;
                            enum: string[];
                            description: string;
                        };
                        createdAfter: {
                            type: string;
                            format: string;
                            description: string;
                        };
                        createdBefore: {
                            type: string;
                            format: string;
                            description: string;
                        };
                        subject: {
                            type: string;
                            format: string;
                        };
                        includeAllUserRecords: {
                            type: string;
                            default: boolean;
                            description: string;
                        };
                        limit: {
                            type: string;
                            minimum: number;
                            maximum: number;
                            default: number;
                        };
                        hasComment: {
                            type: string;
                            description: string;
                        };
                        comment: {
                            type: string;
                            description: string;
                        };
                        addedLabels: {
                            type: string;
                            items: {
                                type: string;
                            };
                            description: string;
                        };
                        removedLabels: {
                            type: string;
                            items: {
                                type: string;
                            };
                            description: string;
                        };
                        addedTags: {
                            type: string;
                            items: {
                                type: string;
                            };
                            description: string;
                        };
                        removedTags: {
                            type: string;
                            items: {
                                type: string;
                            };
                            description: string;
                        };
                        reportTypes: {
                            type: string;
                            items: {
                                type: string;
                            };
                        };
                        cursor: {
                            type: string;
                        };
                    };
                };
                output: {
                    encoding: string;
                    schema: {
                        type: string;
                        required: string[];
                        properties: {
                            cursor: {
                                type: string;
                            };
                            events: {
                                type: string;
                                items: {
                                    type: string;
                                    ref: string;
                                };
                            };
                        };
                    };
                };
            };
        };
    };
    ToolsOzoneModerationQueryStatuses: {
        lexicon: number;
        id: string;
        defs: {
            main: {
                type: string;
                description: string;
                parameters: {
                    type: string;
                    properties: {
                        subject: {
                            type: string;
                            format: string;
                        };
                        comment: {
                            type: string;
                            description: string;
                        };
                        reportedAfter: {
                            type: string;
                            format: string;
                            description: string;
                        };
                        reportedBefore: {
                            type: string;
                            format: string;
                            description: string;
                        };
                        reviewedAfter: {
                            type: string;
                            format: string;
                            description: string;
                        };
                        reviewedBefore: {
                            type: string;
                            format: string;
                            description: string;
                        };
                        includeMuted: {
                            type: string;
                            description: string;
                        };
                        reviewState: {
                            type: string;
                            description: string;
                        };
                        ignoreSubjects: {
                            type: string;
                            items: {
                                type: string;
                                format: string;
                            };
                        };
                        lastReviewedBy: {
                            type: string;
                            format: string;
                            description: string;
                        };
                        sortField: {
                            type: string;
                            default: string;
                            enum: string[];
                        };
                        sortDirection: {
                            type: string;
                            default: string;
                            enum: string[];
                        };
                        takendown: {
                            type: string;
                            description: string;
                        };
                        appealed: {
                            type: string;
                            description: string;
                        };
                        limit: {
                            type: string;
                            minimum: number;
                            maximum: number;
                            default: number;
                        };
                        tags: {
                            type: string;
                            items: {
                                type: string;
                            };
                        };
                        excludeTags: {
                            type: string;
                            items: {
                                type: string;
                            };
                        };
                        cursor: {
                            type: string;
                        };
                    };
                };
                output: {
                    encoding: string;
                    schema: {
                        type: string;
                        required: string[];
                        properties: {
                            cursor: {
                                type: string;
                            };
                            subjectStatuses: {
                                type: string;
                                items: {
                                    type: string;
                                    ref: string;
                                };
                            };
                        };
                    };
                };
            };
        };
    };
    ToolsOzoneModerationSearchRepos: {
        lexicon: number;
        id: string;
        defs: {
            main: {
                type: string;
                description: string;
                parameters: {
                    type: string;
                    properties: {
                        term: {
                            type: string;
                            description: string;
                        };
                        q: {
                            type: string;
                        };
                        limit: {
                            type: string;
                            minimum: number;
                            maximum: number;
                            default: number;
                        };
                        cursor: {
                            type: string;
                        };
                    };
                };
                output: {
                    encoding: string;
                    schema: {
                        type: string;
                        required: string[];
                        properties: {
                            cursor: {
                                type: string;
                            };
                            repos: {
                                type: string;
                                items: {
                                    type: string;
                                    ref: string;
                                };
                            };
                        };
                    };
                };
            };
        };
    };
};
export declare const schemas: LexiconDoc[];
export declare const lexicons: Lexicons;
export declare const ids: {
    ComAtprotoAdminDefs: string;
    ComAtprotoAdminDeleteAccount: string;
    ComAtprotoAdminDisableAccountInvites: string;
    ComAtprotoAdminDisableInviteCodes: string;
    ComAtprotoAdminEnableAccountInvites: string;
    ComAtprotoAdminGetAccountInfo: string;
    ComAtprotoAdminGetAccountInfos: string;
    ComAtprotoAdminGetInviteCodes: string;
    ComAtprotoAdminGetSubjectStatus: string;
    ComAtprotoAdminSendEmail: string;
    ComAtprotoAdminUpdateAccountEmail: string;
    ComAtprotoAdminUpdateAccountHandle: string;
    ComAtprotoAdminUpdateAccountPassword: string;
    ComAtprotoAdminUpdateSubjectStatus: string;
    ComAtprotoIdentityGetRecommendedDidCredentials: string;
    ComAtprotoIdentityRequestPlcOperationSignature: string;
    ComAtprotoIdentityResolveHandle: string;
    ComAtprotoIdentitySignPlcOperation: string;
    ComAtprotoIdentitySubmitPlcOperation: string;
    ComAtprotoIdentityUpdateHandle: string;
    ComAtprotoLabelDefs: string;
    ComAtprotoLabelQueryLabels: string;
    ComAtprotoLabelSubscribeLabels: string;
    ComAtprotoModerationCreateReport: string;
    ComAtprotoModerationDefs: string;
    ComAtprotoRepoApplyWrites: string;
    ComAtprotoRepoCreateRecord: string;
    ComAtprotoRepoDeleteRecord: string;
    ComAtprotoRepoDescribeRepo: string;
    ComAtprotoRepoGetRecord: string;
    ComAtprotoRepoImportRepo: string;
    ComAtprotoRepoListMissingBlobs: string;
    ComAtprotoRepoListRecords: string;
    ComAtprotoRepoPutRecord: string;
    ComAtprotoRepoStrongRef: string;
    ComAtprotoRepoUploadBlob: string;
    ComAtprotoServerActivateAccount: string;
    ComAtprotoServerCheckAccountStatus: string;
    ComAtprotoServerConfirmEmail: string;
    ComAtprotoServerCreateAccount: string;
    ComAtprotoServerCreateAppPassword: string;
    ComAtprotoServerCreateInviteCode: string;
    ComAtprotoServerCreateInviteCodes: string;
    ComAtprotoServerCreateSession: string;
    ComAtprotoServerDeactivateAccount: string;
    ComAtprotoServerDefs: string;
    ComAtprotoServerDeleteAccount: string;
    ComAtprotoServerDeleteSession: string;
    ComAtprotoServerDescribeServer: string;
    ComAtprotoServerGetAccountInviteCodes: string;
    ComAtprotoServerGetServiceAuth: string;
    ComAtprotoServerGetSession: string;
    ComAtprotoServerListAppPasswords: string;
    ComAtprotoServerRefreshSession: string;
    ComAtprotoServerRequestAccountDelete: string;
    ComAtprotoServerRequestEmailConfirmation: string;
    ComAtprotoServerRequestEmailUpdate: string;
    ComAtprotoServerRequestPasswordReset: string;
    ComAtprotoServerReserveSigningKey: string;
    ComAtprotoServerResetPassword: string;
    ComAtprotoServerRevokeAppPassword: string;
    ComAtprotoServerUpdateEmail: string;
    ComAtprotoSyncGetBlob: string;
    ComAtprotoSyncGetBlocks: string;
    ComAtprotoSyncGetCheckout: string;
    ComAtprotoSyncGetHead: string;
    ComAtprotoSyncGetLatestCommit: string;
    ComAtprotoSyncGetRecord: string;
    ComAtprotoSyncGetRepo: string;
    ComAtprotoSyncListBlobs: string;
    ComAtprotoSyncListRepos: string;
    ComAtprotoSyncNotifyOfUpdate: string;
    ComAtprotoSyncRequestCrawl: string;
    ComAtprotoSyncSubscribeRepos: string;
    ComAtprotoTempCheckSignupQueue: string;
    ComAtprotoTempFetchLabels: string;
    ComAtprotoTempRequestPhoneVerification: string;
    AppBskyActorDefs: string;
    AppBskyActorGetPreferences: string;
    AppBskyActorGetProfile: string;
    AppBskyActorGetProfiles: string;
    AppBskyActorGetSuggestions: string;
    AppBskyActorProfile: string;
    AppBskyActorPutPreferences: string;
    AppBskyActorSearchActors: string;
    AppBskyActorSearchActorsTypeahead: string;
    AppBskyEmbedExternal: string;
    AppBskyEmbedImages: string;
    AppBskyEmbedRecord: string;
    AppBskyEmbedRecordWithMedia: string;
    AppBskyFeedDefs: string;
    AppBskyFeedDescribeFeedGenerator: string;
    AppBskyFeedGenerator: string;
    AppBskyFeedGetActorFeeds: string;
    AppBskyFeedGetActorLikes: string;
    AppBskyFeedGetAuthorFeed: string;
    AppBskyFeedGetFeed: string;
    AppBskyFeedGetFeedGenerator: string;
    AppBskyFeedGetFeedGenerators: string;
    AppBskyFeedGetFeedSkeleton: string;
    AppBskyFeedGetLikes: string;
    AppBskyFeedGetListFeed: string;
    AppBskyFeedGetPostThread: string;
    AppBskyFeedGetPosts: string;
    AppBskyFeedGetRepostedBy: string;
    AppBskyFeedGetSuggestedFeeds: string;
    AppBskyFeedGetTimeline: string;
    AppBskyFeedLike: string;
    AppBskyFeedPost: string;
    AppBskyFeedRepost: string;
    AppBskyFeedSearchPosts: string;
    AppBskyFeedSendInteractions: string;
    AppBskyFeedThreadgate: string;
    AppBskyGraphBlock: string;
    AppBskyGraphDefs: string;
    AppBskyGraphFollow: string;
    AppBskyGraphGetBlocks: string;
    AppBskyGraphGetFollowers: string;
    AppBskyGraphGetFollows: string;
    AppBskyGraphGetList: string;
    AppBskyGraphGetListBlocks: string;
    AppBskyGraphGetListMutes: string;
    AppBskyGraphGetLists: string;
    AppBskyGraphGetMutes: string;
    AppBskyGraphGetRelationships: string;
    AppBskyGraphGetSuggestedFollowsByActor: string;
    AppBskyGraphList: string;
    AppBskyGraphListblock: string;
    AppBskyGraphListitem: string;
    AppBskyGraphMuteActor: string;
    AppBskyGraphMuteActorList: string;
    AppBskyGraphUnmuteActor: string;
    AppBskyGraphUnmuteActorList: string;
    AppBskyLabelerDefs: string;
    AppBskyLabelerGetServices: string;
    AppBskyLabelerService: string;
    AppBskyNotificationGetUnreadCount: string;
    AppBskyNotificationListNotifications: string;
    AppBskyNotificationRegisterPush: string;
    AppBskyNotificationUpdateSeen: string;
    AppBskyRichtextFacet: string;
    AppBskyUnspeccedDefs: string;
    AppBskyUnspeccedGetPopularFeedGenerators: string;
    AppBskyUnspeccedGetSuggestionsSkeleton: string;
    AppBskyUnspeccedGetTaggedSuggestions: string;
    AppBskyUnspeccedSearchActorsSkeleton: string;
    AppBskyUnspeccedSearchPostsSkeleton: string;
    ToolsOzoneCommunicationCreateTemplate: string;
    ToolsOzoneCommunicationDefs: string;
    ToolsOzoneCommunicationDeleteTemplate: string;
    ToolsOzoneCommunicationListTemplates: string;
    ToolsOzoneCommunicationUpdateTemplate: string;
    ToolsOzoneModerationDefs: string;
    ToolsOzoneModerationEmitEvent: string;
    ToolsOzoneModerationGetEvent: string;
    ToolsOzoneModerationGetRecord: string;
    ToolsOzoneModerationGetRepo: string;
    ToolsOzoneModerationQueryEvents: string;
    ToolsOzoneModerationQueryStatuses: string;
    ToolsOzoneModerationSearchRepos: string;
};
//# sourceMappingURL=lexicons.d.ts.map