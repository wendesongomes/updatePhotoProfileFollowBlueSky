"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.validateModeration = exports.isModeration = exports.validateRecordViewNotFound = exports.isRecordViewNotFound = exports.validateRecordViewDetail = exports.isRecordViewDetail = exports.validateRecordView = exports.isRecordView = exports.validateRepoViewNotFound = exports.isRepoViewNotFound = exports.validateRepoViewDetail = exports.isRepoViewDetail = exports.validateRepoView = exports.isRepoView = exports.validateModEventTag = exports.isModEventTag = exports.validateModEventDivert = exports.isModEventDivert = exports.validateModEventEmail = exports.isModEventEmail = exports.validateModEventUnmute = exports.isModEventUnmute = exports.validateModEventMute = exports.isModEventMute = exports.validateModEventEscalate = exports.isModEventEscalate = exports.validateModEventAcknowledge = exports.isModEventAcknowledge = exports.validateModEventLabel = exports.isModEventLabel = exports.validateModEventReport = exports.isModEventReport = exports.validateModEventComment = exports.isModEventComment = exports.validateModEventResolveAppeal = exports.isModEventResolveAppeal = exports.validateModEventReverseTakedown = exports.isModEventReverseTakedown = exports.validateModEventTakedown = exports.isModEventTakedown = exports.REVIEWNONE = exports.REVIEWCLOSED = exports.REVIEWESCALATED = exports.REVIEWOPEN = exports.validateSubjectStatusView = exports.isSubjectStatusView = exports.validateModEventViewDetail = exports.isModEventViewDetail = exports.validateModEventView = exports.isModEventView = void 0;
exports.validateVideoDetails = exports.isVideoDetails = exports.validateImageDetails = exports.isImageDetails = exports.validateBlobView = exports.isBlobView = exports.validateModerationDetail = exports.isModerationDetail = void 0;
const util_1 = require("../../../../util");
const lexicons_1 = require("../../../../lexicons");
function isModEventView(v) {
    return ((0, util_1.isObj)(v) &&
        (0, util_1.hasProp)(v, '$type') &&
        v.$type === 'tools.ozone.moderation.defs#modEventView');
}
exports.isModEventView = isModEventView;
function validateModEventView(v) {
    return lexicons_1.lexicons.validate('tools.ozone.moderation.defs#modEventView', v);
}
exports.validateModEventView = validateModEventView;
function isModEventViewDetail(v) {
    return ((0, util_1.isObj)(v) &&
        (0, util_1.hasProp)(v, '$type') &&
        v.$type === 'tools.ozone.moderation.defs#modEventViewDetail');
}
exports.isModEventViewDetail = isModEventViewDetail;
function validateModEventViewDetail(v) {
    return lexicons_1.lexicons.validate('tools.ozone.moderation.defs#modEventViewDetail', v);
}
exports.validateModEventViewDetail = validateModEventViewDetail;
function isSubjectStatusView(v) {
    return ((0, util_1.isObj)(v) &&
        (0, util_1.hasProp)(v, '$type') &&
        v.$type === 'tools.ozone.moderation.defs#subjectStatusView');
}
exports.isSubjectStatusView = isSubjectStatusView;
function validateSubjectStatusView(v) {
    return lexicons_1.lexicons.validate('tools.ozone.moderation.defs#subjectStatusView', v);
}
exports.validateSubjectStatusView = validateSubjectStatusView;
/** Moderator review status of a subject: Open. Indicates that the subject needs to be reviewed by a moderator */
exports.REVIEWOPEN = 'tools.ozone.moderation.defs#reviewOpen';
/** Moderator review status of a subject: Escalated. Indicates that the subject was escalated for review by a moderator */
exports.REVIEWESCALATED = 'tools.ozone.moderation.defs#reviewEscalated';
/** Moderator review status of a subject: Closed. Indicates that the subject was already reviewed and resolved by a moderator */
exports.REVIEWCLOSED = 'tools.ozone.moderation.defs#reviewClosed';
/** Moderator review status of a subject: Unnecessary. Indicates that the subject does not need a review at the moment but there is probably some moderation related metadata available for it */
exports.REVIEWNONE = 'tools.ozone.moderation.defs#reviewNone';
function isModEventTakedown(v) {
    return ((0, util_1.isObj)(v) &&
        (0, util_1.hasProp)(v, '$type') &&
        v.$type === 'tools.ozone.moderation.defs#modEventTakedown');
}
exports.isModEventTakedown = isModEventTakedown;
function validateModEventTakedown(v) {
    return lexicons_1.lexicons.validate('tools.ozone.moderation.defs#modEventTakedown', v);
}
exports.validateModEventTakedown = validateModEventTakedown;
function isModEventReverseTakedown(v) {
    return ((0, util_1.isObj)(v) &&
        (0, util_1.hasProp)(v, '$type') &&
        v.$type === 'tools.ozone.moderation.defs#modEventReverseTakedown');
}
exports.isModEventReverseTakedown = isModEventReverseTakedown;
function validateModEventReverseTakedown(v) {
    return lexicons_1.lexicons.validate('tools.ozone.moderation.defs#modEventReverseTakedown', v);
}
exports.validateModEventReverseTakedown = validateModEventReverseTakedown;
function isModEventResolveAppeal(v) {
    return ((0, util_1.isObj)(v) &&
        (0, util_1.hasProp)(v, '$type') &&
        v.$type === 'tools.ozone.moderation.defs#modEventResolveAppeal');
}
exports.isModEventResolveAppeal = isModEventResolveAppeal;
function validateModEventResolveAppeal(v) {
    return lexicons_1.lexicons.validate('tools.ozone.moderation.defs#modEventResolveAppeal', v);
}
exports.validateModEventResolveAppeal = validateModEventResolveAppeal;
function isModEventComment(v) {
    return ((0, util_1.isObj)(v) &&
        (0, util_1.hasProp)(v, '$type') &&
        v.$type === 'tools.ozone.moderation.defs#modEventComment');
}
exports.isModEventComment = isModEventComment;
function validateModEventComment(v) {
    return lexicons_1.lexicons.validate('tools.ozone.moderation.defs#modEventComment', v);
}
exports.validateModEventComment = validateModEventComment;
function isModEventReport(v) {
    return ((0, util_1.isObj)(v) &&
        (0, util_1.hasProp)(v, '$type') &&
        v.$type === 'tools.ozone.moderation.defs#modEventReport');
}
exports.isModEventReport = isModEventReport;
function validateModEventReport(v) {
    return lexicons_1.lexicons.validate('tools.ozone.moderation.defs#modEventReport', v);
}
exports.validateModEventReport = validateModEventReport;
function isModEventLabel(v) {
    return ((0, util_1.isObj)(v) &&
        (0, util_1.hasProp)(v, '$type') &&
        v.$type === 'tools.ozone.moderation.defs#modEventLabel');
}
exports.isModEventLabel = isModEventLabel;
function validateModEventLabel(v) {
    return lexicons_1.lexicons.validate('tools.ozone.moderation.defs#modEventLabel', v);
}
exports.validateModEventLabel = validateModEventLabel;
function isModEventAcknowledge(v) {
    return ((0, util_1.isObj)(v) &&
        (0, util_1.hasProp)(v, '$type') &&
        v.$type === 'tools.ozone.moderation.defs#modEventAcknowledge');
}
exports.isModEventAcknowledge = isModEventAcknowledge;
function validateModEventAcknowledge(v) {
    return lexicons_1.lexicons.validate('tools.ozone.moderation.defs#modEventAcknowledge', v);
}
exports.validateModEventAcknowledge = validateModEventAcknowledge;
function isModEventEscalate(v) {
    return ((0, util_1.isObj)(v) &&
        (0, util_1.hasProp)(v, '$type') &&
        v.$type === 'tools.ozone.moderation.defs#modEventEscalate');
}
exports.isModEventEscalate = isModEventEscalate;
function validateModEventEscalate(v) {
    return lexicons_1.lexicons.validate('tools.ozone.moderation.defs#modEventEscalate', v);
}
exports.validateModEventEscalate = validateModEventEscalate;
function isModEventMute(v) {
    return ((0, util_1.isObj)(v) &&
        (0, util_1.hasProp)(v, '$type') &&
        v.$type === 'tools.ozone.moderation.defs#modEventMute');
}
exports.isModEventMute = isModEventMute;
function validateModEventMute(v) {
    return lexicons_1.lexicons.validate('tools.ozone.moderation.defs#modEventMute', v);
}
exports.validateModEventMute = validateModEventMute;
function isModEventUnmute(v) {
    return ((0, util_1.isObj)(v) &&
        (0, util_1.hasProp)(v, '$type') &&
        v.$type === 'tools.ozone.moderation.defs#modEventUnmute');
}
exports.isModEventUnmute = isModEventUnmute;
function validateModEventUnmute(v) {
    return lexicons_1.lexicons.validate('tools.ozone.moderation.defs#modEventUnmute', v);
}
exports.validateModEventUnmute = validateModEventUnmute;
function isModEventEmail(v) {
    return ((0, util_1.isObj)(v) &&
        (0, util_1.hasProp)(v, '$type') &&
        v.$type === 'tools.ozone.moderation.defs#modEventEmail');
}
exports.isModEventEmail = isModEventEmail;
function validateModEventEmail(v) {
    return lexicons_1.lexicons.validate('tools.ozone.moderation.defs#modEventEmail', v);
}
exports.validateModEventEmail = validateModEventEmail;
function isModEventDivert(v) {
    return ((0, util_1.isObj)(v) &&
        (0, util_1.hasProp)(v, '$type') &&
        v.$type === 'tools.ozone.moderation.defs#modEventDivert');
}
exports.isModEventDivert = isModEventDivert;
function validateModEventDivert(v) {
    return lexicons_1.lexicons.validate('tools.ozone.moderation.defs#modEventDivert', v);
}
exports.validateModEventDivert = validateModEventDivert;
function isModEventTag(v) {
    return ((0, util_1.isObj)(v) &&
        (0, util_1.hasProp)(v, '$type') &&
        v.$type === 'tools.ozone.moderation.defs#modEventTag');
}
exports.isModEventTag = isModEventTag;
function validateModEventTag(v) {
    return lexicons_1.lexicons.validate('tools.ozone.moderation.defs#modEventTag', v);
}
exports.validateModEventTag = validateModEventTag;
function isRepoView(v) {
    return ((0, util_1.isObj)(v) &&
        (0, util_1.hasProp)(v, '$type') &&
        v.$type === 'tools.ozone.moderation.defs#repoView');
}
exports.isRepoView = isRepoView;
function validateRepoView(v) {
    return lexicons_1.lexicons.validate('tools.ozone.moderation.defs#repoView', v);
}
exports.validateRepoView = validateRepoView;
function isRepoViewDetail(v) {
    return ((0, util_1.isObj)(v) &&
        (0, util_1.hasProp)(v, '$type') &&
        v.$type === 'tools.ozone.moderation.defs#repoViewDetail');
}
exports.isRepoViewDetail = isRepoViewDetail;
function validateRepoViewDetail(v) {
    return lexicons_1.lexicons.validate('tools.ozone.moderation.defs#repoViewDetail', v);
}
exports.validateRepoViewDetail = validateRepoViewDetail;
function isRepoViewNotFound(v) {
    return ((0, util_1.isObj)(v) &&
        (0, util_1.hasProp)(v, '$type') &&
        v.$type === 'tools.ozone.moderation.defs#repoViewNotFound');
}
exports.isRepoViewNotFound = isRepoViewNotFound;
function validateRepoViewNotFound(v) {
    return lexicons_1.lexicons.validate('tools.ozone.moderation.defs#repoViewNotFound', v);
}
exports.validateRepoViewNotFound = validateRepoViewNotFound;
function isRecordView(v) {
    return ((0, util_1.isObj)(v) &&
        (0, util_1.hasProp)(v, '$type') &&
        v.$type === 'tools.ozone.moderation.defs#recordView');
}
exports.isRecordView = isRecordView;
function validateRecordView(v) {
    return lexicons_1.lexicons.validate('tools.ozone.moderation.defs#recordView', v);
}
exports.validateRecordView = validateRecordView;
function isRecordViewDetail(v) {
    return ((0, util_1.isObj)(v) &&
        (0, util_1.hasProp)(v, '$type') &&
        v.$type === 'tools.ozone.moderation.defs#recordViewDetail');
}
exports.isRecordViewDetail = isRecordViewDetail;
function validateRecordViewDetail(v) {
    return lexicons_1.lexicons.validate('tools.ozone.moderation.defs#recordViewDetail', v);
}
exports.validateRecordViewDetail = validateRecordViewDetail;
function isRecordViewNotFound(v) {
    return ((0, util_1.isObj)(v) &&
        (0, util_1.hasProp)(v, '$type') &&
        v.$type === 'tools.ozone.moderation.defs#recordViewNotFound');
}
exports.isRecordViewNotFound = isRecordViewNotFound;
function validateRecordViewNotFound(v) {
    return lexicons_1.lexicons.validate('tools.ozone.moderation.defs#recordViewNotFound', v);
}
exports.validateRecordViewNotFound = validateRecordViewNotFound;
function isModeration(v) {
    return ((0, util_1.isObj)(v) &&
        (0, util_1.hasProp)(v, '$type') &&
        v.$type === 'tools.ozone.moderation.defs#moderation');
}
exports.isModeration = isModeration;
function validateModeration(v) {
    return lexicons_1.lexicons.validate('tools.ozone.moderation.defs#moderation', v);
}
exports.validateModeration = validateModeration;
function isModerationDetail(v) {
    return ((0, util_1.isObj)(v) &&
        (0, util_1.hasProp)(v, '$type') &&
        v.$type === 'tools.ozone.moderation.defs#moderationDetail');
}
exports.isModerationDetail = isModerationDetail;
function validateModerationDetail(v) {
    return lexicons_1.lexicons.validate('tools.ozone.moderation.defs#moderationDetail', v);
}
exports.validateModerationDetail = validateModerationDetail;
function isBlobView(v) {
    return ((0, util_1.isObj)(v) &&
        (0, util_1.hasProp)(v, '$type') &&
        v.$type === 'tools.ozone.moderation.defs#blobView');
}
exports.isBlobView = isBlobView;
function validateBlobView(v) {
    return lexicons_1.lexicons.validate('tools.ozone.moderation.defs#blobView', v);
}
exports.validateBlobView = validateBlobView;
function isImageDetails(v) {
    return ((0, util_1.isObj)(v) &&
        (0, util_1.hasProp)(v, '$type') &&
        v.$type === 'tools.ozone.moderation.defs#imageDetails');
}
exports.isImageDetails = isImageDetails;
function validateImageDetails(v) {
    return lexicons_1.lexicons.validate('tools.ozone.moderation.defs#imageDetails', v);
}
exports.validateImageDetails = validateImageDetails;
function isVideoDetails(v) {
    return ((0, util_1.isObj)(v) &&
        (0, util_1.hasProp)(v, '$type') &&
        v.$type === 'tools.ozone.moderation.defs#videoDetails');
}
exports.isVideoDetails = isVideoDetails;
function validateVideoDetails(v) {
    return lexicons_1.lexicons.validate('tools.ozone.moderation.defs#videoDetails', v);
}
exports.validateVideoDetails = validateVideoDetails;
//# sourceMappingURL=defs.js.map