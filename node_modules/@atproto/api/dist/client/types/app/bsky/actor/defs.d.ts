/**
 * GENERATED CODE - DO NOT MODIFY
 */
import { ValidationResult } from '@atproto/lexicon';
import * as ComAtprotoLabelDefs from '../../../com/atproto/label/defs';
import * as AppBskyGraphDefs from '../graph/defs';
export interface ProfileViewBasic {
    did: string;
    handle: string;
    displayName?: string;
    avatar?: string;
    associated?: ProfileAssociated;
    viewer?: ViewerState;
    labels?: ComAtprotoLabelDefs.Label[];
    [k: string]: unknown;
}
export declare function isProfileViewBasic(v: unknown): v is ProfileViewBasic;
export declare function validateProfileViewBasic(v: unknown): ValidationResult;
export interface ProfileView {
    did: string;
    handle: string;
    displayName?: string;
    description?: string;
    avatar?: string;
    associated?: ProfileAssociated;
    indexedAt?: string;
    viewer?: ViewerState;
    labels?: ComAtprotoLabelDefs.Label[];
    [k: string]: unknown;
}
export declare function isProfileView(v: unknown): v is ProfileView;
export declare function validateProfileView(v: unknown): ValidationResult;
export interface ProfileViewDetailed {
    did: string;
    handle: string;
    displayName?: string;
    description?: string;
    avatar?: string;
    banner?: string;
    followersCount?: number;
    followsCount?: number;
    postsCount?: number;
    associated?: ProfileAssociated;
    indexedAt?: string;
    viewer?: ViewerState;
    labels?: ComAtprotoLabelDefs.Label[];
    [k: string]: unknown;
}
export declare function isProfileViewDetailed(v: unknown): v is ProfileViewDetailed;
export declare function validateProfileViewDetailed(v: unknown): ValidationResult;
export interface ProfileAssociated {
    lists?: number;
    feedgens?: number;
    labeler?: boolean;
    [k: string]: unknown;
}
export declare function isProfileAssociated(v: unknown): v is ProfileAssociated;
export declare function validateProfileAssociated(v: unknown): ValidationResult;
/** Metadata about the requesting account's relationship with the subject account. Only has meaningful content for authed requests. */
export interface ViewerState {
    muted?: boolean;
    mutedByList?: AppBskyGraphDefs.ListViewBasic;
    blockedBy?: boolean;
    blocking?: string;
    blockingByList?: AppBskyGraphDefs.ListViewBasic;
    following?: string;
    followedBy?: string;
    [k: string]: unknown;
}
export declare function isViewerState(v: unknown): v is ViewerState;
export declare function validateViewerState(v: unknown): ValidationResult;
export type Preferences = (AdultContentPref | ContentLabelPref | SavedFeedsPref | PersonalDetailsPref | FeedViewPref | ThreadViewPref | InterestsPref | MutedWordsPref | HiddenPostsPref | {
    $type: string;
    [k: string]: unknown;
})[];
export interface AdultContentPref {
    enabled: boolean;
    [k: string]: unknown;
}
export declare function isAdultContentPref(v: unknown): v is AdultContentPref;
export declare function validateAdultContentPref(v: unknown): ValidationResult;
export interface ContentLabelPref {
    /** Which labeler does this preference apply to? If undefined, applies globally. */
    labelerDid?: string;
    label: string;
    visibility: 'ignore' | 'show' | 'warn' | 'hide' | (string & {});
    [k: string]: unknown;
}
export declare function isContentLabelPref(v: unknown): v is ContentLabelPref;
export declare function validateContentLabelPref(v: unknown): ValidationResult;
export interface SavedFeedsPref {
    pinned: string[];
    saved: string[];
    timelineIndex?: number;
    [k: string]: unknown;
}
export declare function isSavedFeedsPref(v: unknown): v is SavedFeedsPref;
export declare function validateSavedFeedsPref(v: unknown): ValidationResult;
export interface PersonalDetailsPref {
    /** The birth date of account owner. */
    birthDate?: string;
    [k: string]: unknown;
}
export declare function isPersonalDetailsPref(v: unknown): v is PersonalDetailsPref;
export declare function validatePersonalDetailsPref(v: unknown): ValidationResult;
export interface FeedViewPref {
    /** The URI of the feed, or an identifier which describes the feed. */
    feed: string;
    /** Hide replies in the feed. */
    hideReplies?: boolean;
    /** Hide replies in the feed if they are not by followed users. */
    hideRepliesByUnfollowed: boolean;
    /** Hide replies in the feed if they do not have this number of likes. */
    hideRepliesByLikeCount?: number;
    /** Hide reposts in the feed. */
    hideReposts?: boolean;
    /** Hide quote posts in the feed. */
    hideQuotePosts?: boolean;
    [k: string]: unknown;
}
export declare function isFeedViewPref(v: unknown): v is FeedViewPref;
export declare function validateFeedViewPref(v: unknown): ValidationResult;
export interface ThreadViewPref {
    /** Sorting mode for threads. */
    sort?: 'oldest' | 'newest' | 'most-likes' | 'random' | (string & {});
    /** Show followed users at the top of all replies. */
    prioritizeFollowedUsers?: boolean;
    [k: string]: unknown;
}
export declare function isThreadViewPref(v: unknown): v is ThreadViewPref;
export declare function validateThreadViewPref(v: unknown): ValidationResult;
export interface InterestsPref {
    /** A list of tags which describe the account owner's interests gathered during onboarding. */
    tags: string[];
    [k: string]: unknown;
}
export declare function isInterestsPref(v: unknown): v is InterestsPref;
export declare function validateInterestsPref(v: unknown): ValidationResult;
export type MutedWordTarget = 'content' | 'tag' | (string & {});
/** A word that the account owner has muted. */
export interface MutedWord {
    /** The muted word itself. */
    value: string;
    /** The intended targets of the muted word. */
    targets: MutedWordTarget[];
    [k: string]: unknown;
}
export declare function isMutedWord(v: unknown): v is MutedWord;
export declare function validateMutedWord(v: unknown): ValidationResult;
export interface MutedWordsPref {
    /** A list of words the account owner has muted. */
    items: MutedWord[];
    [k: string]: unknown;
}
export declare function isMutedWordsPref(v: unknown): v is MutedWordsPref;
export declare function validateMutedWordsPref(v: unknown): ValidationResult;
export interface HiddenPostsPref {
    /** A list of URIs of posts the account owner has hidden. */
    items: string[];
    [k: string]: unknown;
}
export declare function isHiddenPostsPref(v: unknown): v is HiddenPostsPref;
export declare function validateHiddenPostsPref(v: unknown): ValidationResult;
export interface LabelersPref {
    labelers: LabelerPrefItem[];
    [k: string]: unknown;
}
export declare function isLabelersPref(v: unknown): v is LabelersPref;
export declare function validateLabelersPref(v: unknown): ValidationResult;
export interface LabelerPrefItem {
    did: string;
    [k: string]: unknown;
}
export declare function isLabelerPrefItem(v: unknown): v is LabelerPrefItem;
export declare function validateLabelerPrefItem(v: unknown): ValidationResult;
//# sourceMappingURL=defs.d.ts.map