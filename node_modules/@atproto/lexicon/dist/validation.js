"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.assertValidXrpcMessage = exports.assertValidXrpcOutput = exports.assertValidXrpcInput = exports.assertValidXrpcParams = exports.assertValidRecord = void 0;
const util_1 = require("./util");
const ComplexValidators = __importStar(require("./validators/complex"));
const XrpcValidators = __importStar(require("./validators/xrpc"));
function assertValidRecord(lexicons, def, value) {
    const res = ComplexValidators.object(lexicons, 'Record', def.record, value);
    if (!res.success)
        throw res.error;
    return res.value;
}
exports.assertValidRecord = assertValidRecord;
function assertValidXrpcParams(lexicons, def, value) {
    if (def.parameters) {
        const res = XrpcValidators.params(lexicons, 'Params', def.parameters, value);
        if (!res.success)
            throw res.error;
        return res.value;
    }
}
exports.assertValidXrpcParams = assertValidXrpcParams;
function assertValidXrpcInput(lexicons, def, value) {
    if (def.input?.schema) {
        // loop: all input schema definitions
        return (0, util_1.assertValidOneOf)(lexicons, 'Input', def.input.schema, value, true);
    }
}
exports.assertValidXrpcInput = assertValidXrpcInput;
function assertValidXrpcOutput(lexicons, def, value) {
    if (def.output?.schema) {
        // loop: all output schema definitions
        return (0, util_1.assertValidOneOf)(lexicons, 'Output', def.output.schema, value, true);
    }
}
exports.assertValidXrpcOutput = assertValidXrpcOutput;
function assertValidXrpcMessage(lexicons, def, value) {
    if (def.message?.schema) {
        // loop: all output schema definitions
        return (0, util_1.assertValidOneOf)(lexicons, 'Message', def.message.schema, value, true);
    }
}
exports.assertValidXrpcMessage = assertValidXrpcMessage;
//# sourceMappingURL=validation.js.map