"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.requiredPropertiesRefinement = exports.toConcreteTypes = exports.assertValidOneOf = exports.validateOneOf = exports.toLexUri = void 0;
const ComplexValidators = __importStar(require("./validators/complex"));
const types_1 = require("./types");
const zod_1 = require("zod");
function toLexUri(str, baseUri) {
    if (str.split('#').length > 2) {
        throw new Error('Uri can only have one hash segment');
    }
    if (str.startsWith('lex:')) {
        return str;
    }
    if (str.startsWith('#')) {
        if (!baseUri) {
            throw new Error(`Unable to resolve uri without anchor: ${str}`);
        }
        return `${baseUri}${str}`;
    }
    return `lex:${str}`;
}
exports.toLexUri = toLexUri;
function validateOneOf(lexicons, path, def, value, mustBeObj = false) {
    let error;
    let concreteDefs;
    if (def.type === 'union') {
        if (!(0, types_1.isDiscriminatedObject)(value)) {
            return {
                success: false,
                error: new types_1.ValidationError(`${path} must be an object which includes the "$type" property`),
            };
        }
        if (!refsContainType(def.refs, value.$type)) {
            if (def.closed) {
                return {
                    success: false,
                    error: new types_1.ValidationError(`${path} $type must be one of ${def.refs.join(', ')}`),
                };
            }
            return { success: true, value };
        }
        else {
            concreteDefs = toConcreteTypes(lexicons, {
                type: 'ref',
                ref: value.$type,
            });
        }
    }
    else {
        concreteDefs = toConcreteTypes(lexicons, def);
    }
    for (const concreteDef of concreteDefs) {
        const result = mustBeObj
            ? ComplexValidators.object(lexicons, path, concreteDef, value)
            : ComplexValidators.validate(lexicons, path, concreteDef, value);
        if (result.success) {
            return result;
        }
        error ?? (error = result.error);
    }
    if (concreteDefs.length > 1) {
        return {
            success: false,
            error: new types_1.ValidationError(`${path} did not match any of the expected definitions`),
        };
    }
    return { success: false, error };
}
exports.validateOneOf = validateOneOf;
function assertValidOneOf(lexicons, path, def, value, mustBeObj = false) {
    const res = validateOneOf(lexicons, path, def, value, mustBeObj);
    if (!res.success)
        throw res.error;
    return res.value;
}
exports.assertValidOneOf = assertValidOneOf;
function toConcreteTypes(lexicons, def) {
    if (def.type === 'ref') {
        return [lexicons.getDefOrThrow(def.ref)];
    }
    else if (def.type === 'union') {
        return def.refs.map((ref) => lexicons.getDefOrThrow(ref)).flat();
    }
    else {
        return [def];
    }
}
exports.toConcreteTypes = toConcreteTypes;
function requiredPropertiesRefinement(object, ctx) {
    // Required fields check
    if (object.required === undefined) {
        return;
    }
    if (!Array.isArray(object.required)) {
        ctx.addIssue({
            code: zod_1.z.ZodIssueCode.invalid_type,
            received: typeof object.required,
            expected: 'array',
        });
        return;
    }
    if (object.properties === undefined) {
        if (object.required.length > 0) {
            ctx.addIssue({
                code: zod_1.z.ZodIssueCode.custom,
                message: `Required fields defined but no properties defined`,
            });
        }
        return;
    }
    for (const field of object.required) {
        if (object.properties[field] === undefined) {
            ctx.addIssue({
                code: zod_1.z.ZodIssueCode.custom,
                message: `Required field "${field}" not defined`,
            });
        }
    }
}
exports.requiredPropertiesRefinement = requiredPropertiesRefinement;
// to avoid bugs like #0189 this needs to handle both
// explicit and implicit #main
const refsContainType = (refs, type) => {
    const lexUri = toLexUri(type);
    if (refs.includes(lexUri)) {
        return true;
    }
    if (lexUri.endsWith('#main')) {
        return refs.includes(lexUri.replace('#main', ''));
    }
    else {
        return refs.includes(lexUri + '#main');
    }
};
//# sourceMappingURL=util.js.map