"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.object = exports.array = exports.validate = void 0;
const types_1 = require("../types");
const util_1 = require("../util");
const Primitives = __importStar(require("./primitives"));
const Blob = __importStar(require("./blob"));
function validate(lexicons, path, def, value) {
    switch (def.type) {
        case 'boolean':
            return Primitives.boolean(lexicons, path, def, value);
        case 'integer':
            return Primitives.integer(lexicons, path, def, value);
        case 'string':
            return Primitives.string(lexicons, path, def, value);
        case 'bytes':
            return Primitives.bytes(lexicons, path, def, value);
        case 'cid-link':
            return Primitives.cidLink(lexicons, path, def, value);
        case 'unknown':
            return Primitives.unknown(lexicons, path, def, value);
        case 'object':
            return object(lexicons, path, def, value);
        case 'array':
            return array(lexicons, path, def, value);
        case 'blob':
            return Blob.blob(lexicons, path, def, value);
        default:
            return {
                success: false,
                error: new types_1.ValidationError(`Unexpected lexicon type: ${def.type}`),
            };
    }
}
exports.validate = validate;
function array(lexicons, path, def, value) {
    // type
    if (!Array.isArray(value)) {
        return {
            success: false,
            error: new types_1.ValidationError(`${path} must be an array`),
        };
    }
    // maxLength
    if (typeof def.maxLength === 'number') {
        if (value.length > def.maxLength) {
            return {
                success: false,
                error: new types_1.ValidationError(`${path} must not have more than ${def.maxLength} elements`),
            };
        }
    }
    // minLength
    if (typeof def.minLength === 'number') {
        if (value.length < def.minLength) {
            return {
                success: false,
                error: new types_1.ValidationError(`${path} must not have fewer than ${def.minLength} elements`),
            };
        }
    }
    // items
    const itemsDef = def.items;
    for (let i = 0; i < value.length; i++) {
        const itemValue = value[i];
        const itemPath = `${path}/${i}`;
        const res = (0, util_1.validateOneOf)(lexicons, itemPath, itemsDef, itemValue);
        if (!res.success) {
            return res;
        }
    }
    return { success: true, value };
}
exports.array = array;
function object(lexicons, path, def, value) {
    def = def;
    // type
    if (!value || typeof value !== 'object') {
        return {
            success: false,
            error: new types_1.ValidationError(`${path} must be an object`),
        };
    }
    const requiredProps = new Set(def.required);
    const nullableProps = new Set(def.nullable);
    // properties
    let resultValue = value;
    if (typeof def.properties === 'object') {
        for (const key in def.properties) {
            if (value[key] === null && nullableProps.has(key)) {
                continue;
            }
            const propDef = def.properties[key];
            const propPath = `${path}/${key}`;
            const validated = (0, util_1.validateOneOf)(lexicons, propPath, propDef, value[key]);
            const propValue = validated.success ? validated.value : value[key];
            const propIsUndefined = typeof propValue === 'undefined';
            // Return error for bad validation, giving required rule precedence
            if (propIsUndefined && requiredProps.has(key)) {
                return {
                    success: false,
                    error: new types_1.ValidationError(`${path} must have the property "${key}"`),
                };
            }
            else if (!propIsUndefined && !validated.success) {
                return validated;
            }
            // Adjust value based on e.g. applied defaults, cloning shallowly if there was a changed value
            if (propValue !== value[key]) {
                if (resultValue === value) {
                    // Lazy shallow clone
                    resultValue = { ...value };
                }
                resultValue[key] = propValue;
            }
        }
    }
    return { success: true, value: resultValue };
}
exports.object = object;
//# sourceMappingURL=complex.js.map